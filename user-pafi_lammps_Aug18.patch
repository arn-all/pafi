diff -ruN src/atom.cpp new_src/atom.cpp
--- src/atom.cpp	2018-11-13 15:33:50.822074235 +0100
+++ new_src/atom.cpp	2018-11-15 17:07:50.521597747 +0100
@@ -99,7 +99,12 @@
   // SPIN package
 
   sp = fm = NULL;
-  
+
+  // USER-PAFI
+
+  pafi_flag = 0;
+  norm = dnorm = path = NULL;
+
   // USER-DPD
 
   uCond = uMech = uChem = uCG = uCGnew = NULL;
@@ -259,6 +264,10 @@
   memory->destroy(v);
   memory->destroy(f);
 
+  memory->destroy(path);
+  memory->destroy(norm);
+  memory->destroy(dnorm);
+  
   memory->destroy(molecule);
   memory->destroy(molindex);
   memory->destroy(molatom);
@@ -429,6 +438,7 @@
   omega_flag = torque_flag = angmom_flag = 0;
   radius_flag = rmass_flag = 0;
   ellipsoid_flag = line_flag = tri_flag = body_flag = 0;
+  pafi_flag = 0;
 
   // magnetic flags
 
@@ -1516,7 +1526,7 @@
    called from reading of input script
 ------------------------------------------------------------------------- */
 
-void Atom::set_mass(const char *file, int line, int narg, char **arg)
+void Atom::set_mass(const char *file, int line, int /*narg*/, char **arg)
 {
   if (mass == NULL) error->all(file,line,"Cannot set mass for this atom style");
 
@@ -2182,6 +2192,11 @@
   if (strcmp(name,"x") == 0) return (void *) x;
   if (strcmp(name,"v") == 0) return (void *) v;
   if (strcmp(name,"f") == 0) return (void *) f;
+
+  if (strcmp(name,"norm") == 0) return (void *) norm;
+  if (strcmp(name,"dnorm") == 0) return (void *) dnorm;
+  if (strcmp(name,"path") == 0) return (void *) path;
+
   if (strcmp(name,"molecule") == 0) return (void *) molecule;
   if (strcmp(name,"q") == 0) return (void *) q;
   if (strcmp(name,"mu") == 0) return (void *) mu;
diff -ruN src/atom.h new_src/atom.h
--- src/atom.h	2018-11-13 15:33:50.822074235 +0100
+++ new_src/atom.h	2018-11-15 17:07:50.521597747 +0100
@@ -71,6 +71,11 @@
   double *vfrac,*s0;
   double **x0;
 
+  // USER-PAFI package
+
+  int pafi_flag;
+  double **path, **norm, **dnorm;
+
   // USER-EFF and USER-AWPMD packages
 
   int *spin;
diff -ruN src/lmpinstalledpkgs.h new_src/lmpinstalledpkgs.h
--- src/lmpinstalledpkgs.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/lmpinstalledpkgs.h	2018-11-15 17:10:30.337605367 +0100
@@ -0,0 +1,7 @@
+#ifndef LMP_INSTALLED_PKGS_H
+#define LMP_INSTALLED_PKGS_H
+const char * LAMMPS_NS::LAMMPS::installed_packages[] = {
+"MANYBODY",
+"USER-PAFI",
+ NULL };
+#endif
Binary files src/lmp_mpi and new_src/lmp_mpi differ
diff -ruN src/Makefile new_src/Makefile
--- src/Makefile	2018-11-13 15:33:48.422038973 +0100
+++ new_src/Makefile	2018-11-15 17:08:47.593600468 +0100
@@ -61,7 +61,7 @@
 	   user-diffraction user-dpd user-drude user-eff user-fep user-h5md \
 	   user-intel user-lb user-manifold user-meamc user-meso \
 	   user-mgpt user-misc user-mofff user-molfile \
-	   user-netcdf user-omp user-phonon user-qmmm user-qtb \
+	   user-netcdf user-omp user-pafi user-phonon user-qmmm user-qtb \
 	   user-quip user-reaxc user-smd user-smtbq user-sph user-tally \
 	   user-uef user-vtk
 
Binary files src/Obj_mpi/angle_hybrid.o and new_src/Obj_mpi/angle_hybrid.o differ
Binary files src/Obj_mpi/angle.o and new_src/Obj_mpi/angle.o differ
Binary files src/Obj_mpi/angle_zero.o and new_src/Obj_mpi/angle_zero.o differ
Binary files src/Obj_mpi/atom_map.o and new_src/Obj_mpi/atom_map.o differ
Binary files src/Obj_mpi/atom.o and new_src/Obj_mpi/atom.o differ
Binary files src/Obj_mpi/atom_vec_atomic.o and new_src/Obj_mpi/atom_vec_atomic.o differ
Binary files src/Obj_mpi/atom_vec_body.o and new_src/Obj_mpi/atom_vec_body.o differ
Binary files src/Obj_mpi/atom_vec_charge.o and new_src/Obj_mpi/atom_vec_charge.o differ
Binary files src/Obj_mpi/atom_vec_ellipsoid.o and new_src/Obj_mpi/atom_vec_ellipsoid.o differ
Binary files src/Obj_mpi/atom_vec_hybrid.o and new_src/Obj_mpi/atom_vec_hybrid.o differ
Binary files src/Obj_mpi/atom_vec_line.o and new_src/Obj_mpi/atom_vec_line.o differ
Binary files src/Obj_mpi/atom_vec.o and new_src/Obj_mpi/atom_vec.o differ
Binary files src/Obj_mpi/atom_vec_pafi.o and new_src/Obj_mpi/atom_vec_pafi.o differ
Binary files src/Obj_mpi/atom_vec_sphere.o and new_src/Obj_mpi/atom_vec_sphere.o differ
Binary files src/Obj_mpi/atom_vec_tri.o and new_src/Obj_mpi/atom_vec_tri.o differ
Binary files src/Obj_mpi/balance.o and new_src/Obj_mpi/balance.o differ
Binary files src/Obj_mpi/body.o and new_src/Obj_mpi/body.o differ
Binary files src/Obj_mpi/bond_hybrid.o and new_src/Obj_mpi/bond_hybrid.o differ
Binary files src/Obj_mpi/bond.o and new_src/Obj_mpi/bond.o differ
Binary files src/Obj_mpi/bond_zero.o and new_src/Obj_mpi/bond_zero.o differ
Binary files src/Obj_mpi/change_box.o and new_src/Obj_mpi/change_box.o differ
Binary files src/Obj_mpi/citeme.o and new_src/Obj_mpi/citeme.o differ
Binary files src/Obj_mpi/comm_brick.o and new_src/Obj_mpi/comm_brick.o differ
Binary files src/Obj_mpi/comm.o and new_src/Obj_mpi/comm.o differ
Binary files src/Obj_mpi/comm_tiled.o and new_src/Obj_mpi/comm_tiled.o differ
Binary files src/Obj_mpi/compute_aggregate_atom.o and new_src/Obj_mpi/compute_aggregate_atom.o differ
Binary files src/Obj_mpi/compute_angle_local.o and new_src/Obj_mpi/compute_angle_local.o differ
Binary files src/Obj_mpi/compute_angle.o and new_src/Obj_mpi/compute_angle.o differ
Binary files src/Obj_mpi/compute_angmom_chunk.o and new_src/Obj_mpi/compute_angmom_chunk.o differ
Binary files src/Obj_mpi/compute_bond_local.o and new_src/Obj_mpi/compute_bond_local.o differ
Binary files src/Obj_mpi/compute_bond.o and new_src/Obj_mpi/compute_bond.o differ
Binary files src/Obj_mpi/compute_centro_atom.o and new_src/Obj_mpi/compute_centro_atom.o differ
Binary files src/Obj_mpi/compute_chunk_atom.o and new_src/Obj_mpi/compute_chunk_atom.o differ
Binary files src/Obj_mpi/compute_cluster_atom.o and new_src/Obj_mpi/compute_cluster_atom.o differ
Binary files src/Obj_mpi/compute_cna_atom.o and new_src/Obj_mpi/compute_cna_atom.o differ
Binary files src/Obj_mpi/compute_com_chunk.o and new_src/Obj_mpi/compute_com_chunk.o differ
Binary files src/Obj_mpi/compute_com.o and new_src/Obj_mpi/compute_com.o differ
Binary files src/Obj_mpi/compute_contact_atom.o and new_src/Obj_mpi/compute_contact_atom.o differ
Binary files src/Obj_mpi/compute_coord_atom.o and new_src/Obj_mpi/compute_coord_atom.o differ
Binary files src/Obj_mpi/compute_dihedral_local.o and new_src/Obj_mpi/compute_dihedral_local.o differ
Binary files src/Obj_mpi/compute_dihedral.o and new_src/Obj_mpi/compute_dihedral.o differ
Binary files src/Obj_mpi/compute_dipole_chunk.o and new_src/Obj_mpi/compute_dipole_chunk.o differ
Binary files src/Obj_mpi/compute_displace_atom.o and new_src/Obj_mpi/compute_displace_atom.o differ
Binary files src/Obj_mpi/compute_erotate_sphere_atom.o and new_src/Obj_mpi/compute_erotate_sphere_atom.o differ
Binary files src/Obj_mpi/compute_erotate_sphere.o and new_src/Obj_mpi/compute_erotate_sphere.o differ
Binary files src/Obj_mpi/compute_fragment_atom.o and new_src/Obj_mpi/compute_fragment_atom.o differ
Binary files src/Obj_mpi/compute_global_atom.o and new_src/Obj_mpi/compute_global_atom.o differ
Binary files src/Obj_mpi/compute_group_group.o and new_src/Obj_mpi/compute_group_group.o differ
Binary files src/Obj_mpi/compute_gyration_chunk.o and new_src/Obj_mpi/compute_gyration_chunk.o differ
Binary files src/Obj_mpi/compute_gyration.o and new_src/Obj_mpi/compute_gyration.o differ
Binary files src/Obj_mpi/compute_heat_flux.o and new_src/Obj_mpi/compute_heat_flux.o differ
Binary files src/Obj_mpi/compute_hexorder_atom.o and new_src/Obj_mpi/compute_hexorder_atom.o differ
Binary files src/Obj_mpi/compute_improper_local.o and new_src/Obj_mpi/compute_improper_local.o differ
Binary files src/Obj_mpi/compute_improper.o and new_src/Obj_mpi/compute_improper.o differ
Binary files src/Obj_mpi/compute_inertia_chunk.o and new_src/Obj_mpi/compute_inertia_chunk.o differ
Binary files src/Obj_mpi/compute_ke_atom.o and new_src/Obj_mpi/compute_ke_atom.o differ
Binary files src/Obj_mpi/compute_ke.o and new_src/Obj_mpi/compute_ke.o differ
Binary files src/Obj_mpi/compute_msd_chunk.o and new_src/Obj_mpi/compute_msd_chunk.o differ
Binary files src/Obj_mpi/compute_msd.o and new_src/Obj_mpi/compute_msd.o differ
Binary files src/Obj_mpi/compute.o and new_src/Obj_mpi/compute.o differ
Binary files src/Obj_mpi/compute_omega_chunk.o and new_src/Obj_mpi/compute_omega_chunk.o differ
Binary files src/Obj_mpi/compute_orientorder_atom.o and new_src/Obj_mpi/compute_orientorder_atom.o differ
Binary files src/Obj_mpi/compute_pair_local.o and new_src/Obj_mpi/compute_pair_local.o differ
Binary files src/Obj_mpi/compute_pair.o and new_src/Obj_mpi/compute_pair.o differ
Binary files src/Obj_mpi/compute_pe_atom.o and new_src/Obj_mpi/compute_pe_atom.o differ
Binary files src/Obj_mpi/compute_pe.o and new_src/Obj_mpi/compute_pe.o differ
Binary files src/Obj_mpi/compute_pressure.o and new_src/Obj_mpi/compute_pressure.o differ
Binary files src/Obj_mpi/compute_property_atom.o and new_src/Obj_mpi/compute_property_atom.o differ
Binary files src/Obj_mpi/compute_property_chunk.o and new_src/Obj_mpi/compute_property_chunk.o differ
Binary files src/Obj_mpi/compute_property_local.o and new_src/Obj_mpi/compute_property_local.o differ
Binary files src/Obj_mpi/compute_rdf.o and new_src/Obj_mpi/compute_rdf.o differ
Binary files src/Obj_mpi/compute_reduce.o and new_src/Obj_mpi/compute_reduce.o differ
Binary files src/Obj_mpi/compute_reduce_region.o and new_src/Obj_mpi/compute_reduce_region.o differ
Binary files src/Obj_mpi/compute_slice.o and new_src/Obj_mpi/compute_slice.o differ
Binary files src/Obj_mpi/compute_stress_atom.o and new_src/Obj_mpi/compute_stress_atom.o differ
Binary files src/Obj_mpi/compute_temp_chunk.o and new_src/Obj_mpi/compute_temp_chunk.o differ
Binary files src/Obj_mpi/compute_temp_com.o and new_src/Obj_mpi/compute_temp_com.o differ
Binary files src/Obj_mpi/compute_temp_deform.o and new_src/Obj_mpi/compute_temp_deform.o differ
Binary files src/Obj_mpi/compute_temp.o and new_src/Obj_mpi/compute_temp.o differ
Binary files src/Obj_mpi/compute_temp_partial.o and new_src/Obj_mpi/compute_temp_partial.o differ
Binary files src/Obj_mpi/compute_temp_profile.o and new_src/Obj_mpi/compute_temp_profile.o differ
Binary files src/Obj_mpi/compute_temp_ramp.o and new_src/Obj_mpi/compute_temp_ramp.o differ
Binary files src/Obj_mpi/compute_temp_region.o and new_src/Obj_mpi/compute_temp_region.o differ
Binary files src/Obj_mpi/compute_temp_sphere.o and new_src/Obj_mpi/compute_temp_sphere.o differ
Binary files src/Obj_mpi/compute_torque_chunk.o and new_src/Obj_mpi/compute_torque_chunk.o differ
Binary files src/Obj_mpi/compute_vacf.o and new_src/Obj_mpi/compute_vacf.o differ
Binary files src/Obj_mpi/compute_vcm_chunk.o and new_src/Obj_mpi/compute_vcm_chunk.o differ
Binary files src/Obj_mpi/create_atoms.o and new_src/Obj_mpi/create_atoms.o differ
Binary files src/Obj_mpi/create_bonds.o and new_src/Obj_mpi/create_bonds.o differ
Binary files src/Obj_mpi/create_box.o and new_src/Obj_mpi/create_box.o differ
Binary files src/Obj_mpi/delete_atoms.o and new_src/Obj_mpi/delete_atoms.o differ
Binary files src/Obj_mpi/delete_bonds.o and new_src/Obj_mpi/delete_bonds.o differ
diff -ruN src/Obj_mpi/.depend new_src/Obj_mpi/.depend
--- src/Obj_mpi/.depend	1970-01-01 01:00:00.000000000 +0100
+++ new_src/Obj_mpi/.depend	2018-11-15 18:43:06.404068493 +0100
@@ -0,0 +1,397 @@
+# FastDep v2.1 for LAMMPS
+# Search path: .:..
+#   393 sources
+#   426 includes
+#   801 depfiles
+nstencil_full_ghost_bin_3d.o : ../nstencil_full_ghost_bin_3d.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil_full_ghost_bin_3d.h ../nstencil.h
+pair_lj_smooth_linear.o : ../pair_lj_smooth_linear.cpp ../force.h ../pointers.h ../lammps.h ../pair_lj_smooth_linear.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+fix_drag.o : ../fix_drag.cpp ../force.h ../pointers.h ../lammps.h ../fix_drag.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../domain.h ../atom.h ../error.h
+pair_lcbop.o : ../pair_lcbop.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_lcbop.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+ntopo_dihedral_all.o : ../ntopo_dihedral_all.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h ../ntopo_dihedral_all.h
+pair_dpd.o : ../pair_dpd.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../random_mars.h ../lmptype.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../pair_dpd.h ../memory.h
+library.o : ../library.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../library.h ../domain.h ../input.h ../atom.h ../comm.h ../universe.h ../atom_vec.h ../variable.h ../info.h ../error.h ../compute.h ../memory.h ../group.h
+pair_lj_gromacs.o : ../pair_lj_gromacs.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair_lj_gromacs.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+pair_lj_cut_coul_dsf.o : ../pair_lj_cut_coul_dsf.cpp ../pair_lj_cut_coul_dsf.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+compute_temp_sphere.o : ../compute_temp_sphere.cpp ../force.h ../pointers.h ../lammps.h ../compute_temp_sphere.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../compute.h ../group.h
+npair_full_multi.o : ../npair_full_multi.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_full_multi.h ../error.h
+compute_cna_atom.o : ../compute_cna_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../compute.h ../compute_cna_atom.h
+fix_gravity.o : ../fix_gravity.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../fix_gravity.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../math_const.h
+fix_temp_csld.o : ../fix_temp_csld.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../fix_temp_csld.h ../lmpwindows.h ../random_mars.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../input.h ../variable.h ../error.h ../memory.h ../compute.h ../group.h
+compute_msd_chunk.o : ../compute_msd_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../compute_msd_chunk.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h ../group.h
+nstencil_half_multi_2d_newton_tri.o : ../nstencil_half_multi_2d_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../nstencil_half_multi_2d_newton_tri.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+write_dump.o : ../write_dump.cpp ../pointers.h ../lammps.h ../dump_dcd.h ../exceptions.h ../dump_image.h ../dump_custom.h ../update.h ../lmpwindows.h ../dump.h ../lmptype.h ../dump_cfg.h ../atom.h ../comm.h ../input.h ../dump_movie.h ../write_dump.h ../dump_atom.h ../dump_local.h ../dump_xyz.h ../error.h ../style_dump.h ../group.h
+reset_ids.o : ../reset_ids.cpp ../special.h ../reset_ids.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h
+compute_omega_chunk.o : ../compute_omega_chunk.cpp ../compute_chunk_atom.h ../compute_omega_chunk.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+compute_rdf.o : ../compute_rdf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../compute_rdf.h ../compute.h ../memory.h ../math_const.h ../group.h
+ntopo_improper_template.o : ../ntopo_improper_template.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../ntopo_improper_template.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../memory.h
+compute_coord_atom.o : ../compute_coord_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../compute_orientorder_atom.h ../neigh_request.h ../error.h ../compute.h ../memory.h ../compute_coord_atom.h
+fix_tmd.o : ../fix_tmd.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../fix_tmd.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h ../group.h
+input.o : ../input.cpp ../special.h ../reset_ids.h ../force.h ../neighbor.h ../delete_atoms.h ../pointers.h ../lammps.h ../write_coeff.h ../pair.h ../improper.h ../delete_bonds.h ../exceptions.h ../angle.h ../dihedral.h ../balance.h ../update.h ../create_bonds.h ../fix.h ../lmpwindows.h ../style_command.h ../replicate.h ../run.h ../output.h ../timer.h ../modify.h ../accelerator_kokkos.h ../thermo.h ../lmptype.h ../domain.h ../create_atoms.h ../read_data.h ../atom.h ../comm.h ../input.h ../write_dump.h ../universe.h ../displace_atoms.h ../minimize.h ../comm_brick.h ../atom_vec.h ../change_box.h ../read_dump.h ../bond.h ../info.h ../read_restart.h ../variable.h ../rerun.h ../min.h ../create_box.h ../write_data.h ../error.h ../write_restart.h ../comm_tiled.h ../memory.h ../compute.h ../velocity.h ../kspace.h ../set.h ../group.h
+compute_property_local.o : ../compute_property_local.cpp ../compute_property_local.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../atom_vec.h ../neigh_request.h ../error.h ../compute.h ../memory.h
+create_atoms.o : ../create_atoms.cpp ../special.h ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../fix.h ../lmpwindows.h ../random_mars.h ../modify.h ../lmptype.h ../domain.h ../create_atoms.h ../atom.h ../comm.h ../input.h ../region.h ../molecule.h ../atom_vec.h ../variable.h ../irregular.h ../error.h ../compute.h ../random_park.h ../math_const.h ../lattice.h
+compute_angle_local.o : ../compute_angle_local.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../angle.h ../update.h ../compute_angle_local.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../compute.h ../memory.h ../math_const.h
+region_plane.o : ../region_plane.cpp ../region_plane.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../region.h ../error.h
+npair_half_nsq_newton.o : ../npair_half_nsq_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../error.h ../npair_half_nsq_newton.h ../group.h
+npair_halffull_newton.o : ../npair_halffull_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../npair_halffull_newton.h ../atom_vec.h ../error.h
+pair_lj_cut.o : ../pair_lj_cut.cpp ../force.h ../pair_lj_cut.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+force.o : ../force.cpp ../angle_zero.h ../style_improper.h ../pair_bop.h ../style_pair.h ../improper_hybrid.h ../pair_lj_cut_coul_dsf.h ../pair_soft.h ../pair_yukawa.h ../force.h ../style_dihedral.h ../pair_lj_cut.h ../style_kspace.h ../pair_lj_expand.h ../pair_lj_gromacs_coul_gromacs.h ../pair_zbl.h ../pointers.h ../lammps.h ../pair_lj_smooth_linear.h ../pair_nb3b_harmonic.h ../pair_born_coul_dsf.h ../pair_gauss.h ../pair_lj_gromacs.h ../improper.h ../pair.h ../pair_coul_dsf.h ../pair_lj_cubic.h ../exceptions.h ../bond_hybrid.h ../angle.h ../pair_gw.h ../pair_polymorphic.h ../dihedral.h ../pair_lj_cut_coul_debye.h ../my_page.h ../update.h ../pair_tersoff.h ../pair_zero.h ../pair_beck.h ../pair_eim.h ../pair_mie_cut.h ../pair_born.h ../pair_rebo.h ../pair_eam_alloy.h ../pair_hybrid_overlay.h ../pair_lj_smooth.h ../lmpwindows.h ../pair_tersoff_zbl.h ../pair_hybrid.h ../pair_born_coul_wolf.h ../pair_coul_wolf.h ../pair_eam_cd.h ../pair_airebo.h ../style_angle.h ../lmptype.h ../pair_eam.h ../pair_coul_cut.h ../pair_dpd_tstat.h ../pair_eam_fs.h ../dihedral_hybrid.h ../atom.h ../comm.h ../pair_comb.h ../pair_lcbop.h ../pair_coul_debye.h ../angle_hybrid.h ../style_bond.h ../pair_tersoff_mod_c.h ../bond.h ../pair_buck_coul_cut.h ../pair_lj96_cut.h ../pair_table.h ../pair_vashishta.h ../pair_gw_zbl.h ../dihedral_zero.h ../improper_zero.h ../pair_airebo_morse.h ../pair_sw.h ../pair_adp.h ../pair_comb3.h ../error.h ../pair_lj_cut_coul_cut.h ../pair_coul_streitz.h ../pair_ufm.h ../pair_vashishta_table.h ../pair_dpd.h ../pair_buck.h ../memory.h ../math_const.h ../pair_morse.h ../bond_zero.h ../kspace.h ../pair_lj_cut_coul_wolf.h ../pair_tersoff_mod.h ../group.h
+ntopo_bond_partial.o : ../ntopo_bond_partial.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h ../ntopo_bond_partial.h
+fix_wall_region.o : ../fix_wall_region.cpp ../force.h ../pointers.h ../lammps.h ../fix_wall_region.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../output.h ../lmptype.h ../domain.h ../atom.h ../region.h ../atom_vec.h ../error.h ../math_const.h ../lattice.h
+fix_ave_chunk.o : ../fix_ave_chunk.cpp ../compute_chunk_atom.h ../force.h ../pointers.h ../lammps.h ../fix_ave_chunk.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h
+pair_lj_expand.o : ../pair_lj_expand.cpp ../force.h ../pair_lj_expand.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+min_fire.o : ../min_fire.cpp ../min_fire.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../output.h ../timer.h ../lmptype.h ../atom.h ../universe.h ../min.h ../error.h
+fix_store_state.o : ../fix_store_state.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../fix_store_state.h ../compute.h ../memory.h ../group.h
+output.o : ../output.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../dump_dcd.h ../exceptions.h ../update.h ../dump_custom.h ../dump_image.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../dump_cfg.h ../domain.h ../atom.h ../input.h ../comm.h ../dump_movie.h ../dump_atom.h ../dump_local.h ../variable.h ../dump_xyz.h ../error.h ../style_dump.h ../compute.h ../write_restart.h ../memory.h ../group.h
+nstencil_full_multi_3d.o : ../nstencil_full_multi_3d.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../nstencil_full_multi_3d.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+pair_bop.o : ../pair_bop.cpp ../pair_bop.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h
+fix_respa.o : ../fix_respa.cpp ../force.h ../pointers.h ../lammps.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../fix_respa.h ../memory.h
+nstencil_half_ghost_bin_2d_newtoff.o : ../nstencil_half_ghost_bin_2d_newtoff.cpp ../nstencil_half_ghost_bin_2d_newtoff.h ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+pair_lj_gromacs_coul_gromacs.o : ../pair_lj_gromacs_coul_gromacs.cpp ../force.h ../neighbor.h ../pair_lj_gromacs_coul_gromacs.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+image.o : ../image.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../image.h ../exceptions.h ../version.h ../lmpwindows.h ../random_mars.h ../lmptype.h ../error.h ../memory.h ../math_const.h
+pair_hybrid.o : ../pair_hybrid.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../update.h ../respa.h ../lmpwindows.h ../integrate.h ../pair_hybrid.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h
+angle_hybrid.o : ../angle_hybrid.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../angle.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../angle_hybrid.h ../error.h ../memory.h
+compute_angle.o : ../compute_angle.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../angle.h ../update.h ../lmpwindows.h ../lmptype.h ../compute_angle.h ../angle_hybrid.h ../error.h ../compute.h
+nbin.o : ../nbin.cpp ../nbin.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../neigh_request.h ../error.h ../memory.h
+fix_wall.o : ../fix_wall.cpp ../fix_wall.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../lattice.h
+balance.o : ../balance.cpp ../imbalance.h ../imbalance_var.h ../force.h ../imbalance_time.h ../rcb.h ../pointers.h ../lammps.h ../imbalance_group.h ../exceptions.h ../balance.h ../update.h ../fix.h ../lmpwindows.h ../timer.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../imbalance_neigh.h ../atom.h ../comm.h ../imbalance_store.h ../irregular.h ../error.h ../memory.h ../group.h
+compute_pe_atom.o : ../compute_pe_atom.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../compute_pe_atom.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../bond.h ../error.h ../compute.h ../memory.h ../kspace.h
+pair_beck.o : ../pair_beck.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_beck.h ../math_special.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+pair_gw_zbl.o : ../pair_gw_zbl.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../pair_gw.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../pair_gw_zbl.h ../error.h ../memory.h ../math_const.h
+npair_skip_size_off2on.o : ../npair_skip_size_off2on.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_skip_size_off2on.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../npair.h ../atom.h ../atom_vec.h ../error.h
+min_hftn.o : ../min_hftn.cpp ../pointers.h ../lammps.h ../pair.h ../fix_minimize.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../timer.h ../modify.h ../lmptype.h ../atom.h ../min.h ../min_hftn.h
+compute_pair_local.o : ../compute_pair_local.cpp ../compute_pair_local.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../neigh_request.h ../error.h ../compute.h ../memory.h ../group.h
+fix_wall_lj93.o : ../fix_wall_lj93.cpp ../fix_wall.h ../pointers.h ../lammps.h ../exceptions.h ../fix_wall_lj93.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../error.h
+pair_zero.o : ../pair_zero.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../pair_zero.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+compute_temp_region.o : ../compute_temp_region.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../compute_temp_region.h ../lmptype.h ../domain.h ../atom.h ../region.h ../error.h ../compute.h ../memory.h ../group.h
+angle_zero.o : ../angle_zero.cpp ../angle_zero.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../angle.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+imbalance_var.o : ../imbalance_var.cpp ../imbalance.h ../imbalance_var.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../input.h ../variable.h ../error.h ../memory.h ../group.h
+npair_half_nsq_newtoff.o : ../npair_half_nsq_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_half_nsq_newtoff.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../group.h
+fix_ave_time.o : ../fix_ave_time.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../fix_ave_time.h ../error.h ../compute.h ../memory.h
+dihedral_hybrid.o : ../dihedral_hybrid.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../dihedral.h ../lmpwindows.h ../lmptype.h ../domain.h ../dihedral_hybrid.h ../atom.h ../comm.h ../error.h ../memory.h
+reader.o : ../reader.cpp ../pointers.h ../lammps.h ../exceptions.h ../reader.h ../lmpwindows.h ../lmptype.h ../error.h
+pair_coul_dsf.o : ../pair_coul_dsf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../pair_coul_dsf.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+npair_full_nsq_ghost.o : ../npair_full_nsq_ghost.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_full_nsq_ghost.h ../error.h
+nstencil_half_bin_2d_newton.o : ../nstencil_half_bin_2d_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../nstencil_half_bin_2d_newton.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+read_restart.o : ../read_restart.cpp ../special.h ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../mpiio.h ../atom_vec.h ../bond.h ../read_restart.h ../irregular.h ../error.h ../memory.h ../fix_read_restart.h ../group.h
+respa.o : ../respa.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../output.h ../timer.h ../pair_hybrid.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../fix_respa.h ../bond.h ../error.h ../compute.h ../memory.h ../kspace.h
+fix_hp.o : ../fix_hp.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../random_mars.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../region.h ../atom_vec.h ../variable.h ../fix_hp.h ../error.h ../compute.h ../memory.h ../group.h
+imbalance.o : ../imbalance.cpp ../imbalance.h ../pointers.h ../lammps.h ../lmpwindows.h ../lmptype.h
+compute_group_group.o : ../compute_group_group.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../compute_group_group.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../compute.h ../math_const.h ../kspace.h ../group.h
+dump_custom.o : ../dump_custom.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../dump_custom.h ../update.h ../fix.h ../lmpwindows.h ../dump.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+nstencil_half_ghost_bin_3d_newtoff.o : ../nstencil_half_ghost_bin_3d_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil_half_ghost_bin_3d_newtoff.h ../nstencil.h
+reader_native.o : ../reader_native.cpp ../pointers.h ../lammps.h ../exceptions.h ../reader_native.h ../reader.h ../lmpwindows.h ../lmptype.h ../atom.h ../error.h ../memory.h
+fix_spring.o : ../fix_spring.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../domain.h ../atom.h ../fix_spring.h ../error.h ../group.h
+bond_zero.o : ../bond_zero.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../bond.h ../error.h ../memory.h ../bond_zero.h
+pair_comb3.o : ../pair_comb3.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../pair_comb3.h ../error.h ../memory.h ../math_const.h ../group.h
+pair_born_coul_wolf.o : ../pair_born_coul_wolf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../pair_born_coul_wolf.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+fix_wall_lj1043.o : ../fix_wall_lj1043.cpp ../fix_wall.h ../pointers.h ../lammps.h ../fix.h ../lmpwindows.h ../lmptype.h ../fix_wall_lj1043.h ../atom.h ../math_const.h
+compute_dipole_chunk.o : ../compute_dipole_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../math_special.h ../lmpwindows.h ../modify.h ../compute_dipole_chunk.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+atom_vec_line.o : ../atom_vec_line.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../atom_vec_line.h ../error.h ../memory.h ../math_const.h
+atom_vec_tri.o : ../atom_vec_tri.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../fix.h ../lmpwindows.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h ../math_const.h
+compute_contact_atom.o : ../compute_contact_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../compute_contact_atom.h ../error.h ../compute.h ../memory.h
+fix_nh.o : ../fix_nh.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../math_extra.h ../fix_deform.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../irregular.h ../error.h ../fix_nh.h ../compute.h ../memory.h ../kspace.h ../group.h
+region_sphere.o : ../region_sphere.cpp ../force.h ../region_sphere.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../input.h ../region.h ../variable.h ../error.h
+region_intersect.o : ../region_intersect.cpp ../force.h ../pointers.h ../lammps.h ../region_intersect.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../region.h ../error.h
+compute_hexorder_atom.o : ../compute_hexorder_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../compute_hexorder_atom.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../compute.h ../memory.h ../math_const.h
+fix_langevin.o : ../fix_langevin.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../respa.h ../fix_langevin.h ../fix.h ../lmpwindows.h ../integrate.h ../random_mars.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../region.h ../atom_vec.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+compute_angmom_chunk.o : ../compute_angmom_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../compute_angmom_chunk.h ../error.h ../compute.h ../memory.h
+fix_nvt.o : ../fix_nvt.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_nvt.h ../fix_nh.h ../error.h ../group.h
+integrate.o : ../integrate.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../update.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../compute.h ../kspace.h
+npair_full_bin.o : ../npair_full_bin.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../error.h ../npair_full_bin.h
+nstencil_half_bin_2d_newton_tri.o : ../nstencil_half_bin_2d_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil_half_bin_2d_newton_tri.h ../nstencil.h
+pair_tersoff_mod.o : ../pair_tersoff_mod.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_tersoff.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h ../pair_tersoff_mod.h
+fix_planeforce.o : ../fix_planeforce.cpp ../force.h ../pointers.h ../lammps.h ../fix_planeforce.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../error.h
+pair_tersoff_zbl.o : ../pair_tersoff_zbl.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../pair_tersoff.h ../lmpwindows.h ../pair_tersoff_zbl.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+bond.o : ../bond.cpp ../force.h ../neighbor.h ../suffix.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../bond.h ../atom_masks.h ../error.h ../memory.h
+neigh_request.o : ../neigh_request.cpp ../pointers.h ../lammps.h ../lmpwindows.h ../lmptype.h ../atom.h ../neigh_request.h ../memory.h
+compute_slice.o : ../compute_slice.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../compute_slice.h ../error.h ../compute.h ../memory.h ../group.h
+fix_recenter.o : ../fix_recenter.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../fix_recenter.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../lattice.h ../group.h
+domain.o : ../domain.cpp ../region_plane.h ../region_cone.h ../region_prism.h ../force.h ../region_cylinder.h ../region_sphere.h ../pointers.h ../lammps.h ../fix_deform.h ../region_intersect.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../style_region.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../region.h ../universe.h ../molecule.h ../region_block.h ../atom_vec.h ../region_union.h ../error.h ../memory.h ../math_const.h ../kspace.h ../lattice.h
+compute_reduce.o : ../compute_reduce.cpp ../force.h ../pointers.h ../lammps.h ../compute_reduce.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+universe.o : ../universe.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../version.h ../lmpwindows.h ../lmptype.h ../universe.h ../error.h ../memory.h
+compute_improper.o : ../compute_improper.cpp ../force.h ../improper_hybrid.h ../pointers.h ../lammps.h ../improper.h ../exceptions.h ../compute_improper.h ../update.h ../lmpwindows.h ../lmptype.h ../error.h ../compute.h
+region.o : ../region.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../input.h ../region.h ../variable.h ../error.h ../lattice.h
+pair_table.o : ../pair_table.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_table.h ../error.h ../memory.h
+dihedral.o : ../dihedral.cpp ../force.h ../suffix.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../dihedral.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../memory.h
+pair_lj_smooth.o : ../pair_lj_smooth.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_lj_smooth.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+fix_enforce2d.o : ../fix_enforce2d.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../fix_enforce2d.h ../error.h
+compute_temp_deform.o : ../compute_temp_deform.cpp ../compute_temp_deform.h ../force.h ../pointers.h ../lammps.h ../fix_deform.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../compute.h ../memory.h ../group.h
+lammps.o : ../lammps.cpp ../compute_chunk_atom.h ../compute_temp_deform.h ../fix_halt.h ../fix_nph_sphere.h ../style_compute.h ../compute_gyration_chunk.h ../min_fire.h ../angle_zero.h ../fix_wall.h ../compute_improper_local.h ../compute_inertia_chunk.h ../compute_property_local.h ../compute_temp_partial.h ../style_improper.h ../region_plane.h ../fix_spring_self.h ../fix_wall_harmonic.h ../pair_bop.h ../reset_ids.h ../region_cone.h ../region_prism.h ../compute_vcm_chunk.h ../style_pair.h ../compute_fragment_atom.h ../compute_omega_chunk.h ../compute_pair_local.h ../compute_vacf.h ../improper_hybrid.h ../pair_lj_cut_coul_dsf.h ../pair_soft.h ../pair_yukawa.h ../style_dihedral.h ../force.h ../compute_temp_profile.h ../pair_lj_cut.h ../style_kspace.h ../neighbor.h ../delete_atoms.h ../region_cylinder.h ../fix_adapt.h ../atom_vec_sphere.h ../pair_lj_expand.h ../pair_lj_gromacs_coul_gromacs.h ../pair_zbl.h ../region_sphere.h ../fix_nvt_sllod.h ../atom_vec_pafi.h ../pointers.h ../lammps.h ../compute_ke.h ../compute_temp_sphere.h ../pair_lj_smooth_linear.h ../pair_nb3b_harmonic.h ../write_coeff.h ../atom_vec_charge.h ../dump_dcd.h ../compute_property_chunk.h ../compute_temp.h ../pair_born_coul_dsf.h ../pair_gauss.h ../verlet.h ../fix_ave_chunk.h ../fix_drag.h ../fix_nvt_sphere.h ../fix_temp_berendsen.h ../compute_reduce.h ../pair_lj_gromacs.h ../fix_wall_region.h ../improper.h ../pair.h ../fix_deform.h ../fix_planeforce.h ../pair_coul_dsf.h ../region_intersect.h ../atom_vec_body.h ../compute_pe_atom.h ../pair_lj_cubic.h ../style_integrate.h ../delete_bonds.h ../fix_move.h ../fix_press_berendsen.h ../fix_qeq_comb.h ../exceptions.h ../compute_improper.h ../angle.h ../fix_minimize.h ../fix_vector.h ../fix_wall_lj93.h ../bond_hybrid.h ../compute_group_group.h ../pair_gw.h ../pair_polymorphic.h ../dihedral.h ../version.h ../balance.h ../pair_lj_cut_coul_debye.h ../my_page.h ../python.h ../lmpinstalledpkgs.h ../compute_gyration.h ../update.h ../pair_tersoff.h ../pair_zero.h ../fix_heat.h ../dump_custom.h ../dump_image.h ../pair_beck.h ../respa.h ../style_minimize.h ../create_bonds.h ../compute_angle_local.h ../compute_com_chunk.h ../compute_msd_chunk.h ../pair_eim.h ../pair_mie_cut.h ../fix_addforce.h ../fix_dt_reset.h ../fix_group.h ../pair_born.h ../pair_rebo.h ../fix.h ../fix_langevin.h ../pair_eam_alloy.h ../pair_hybrid_overlay.h ../pair_lj_smooth.h ../fix_property_atom.h ../fix_temp_csld.h ../lmpwindows.h ../compute_temp_region.h ../pair_tersoff_zbl.h ../integrate.h ../style_command.h ../replicate.h ../style_region.h ../fix_ave_histo.h ../fix_npt_sphere.h ../compute_hexorder_atom.h ../fix_temp_rescale.h ../atom_vec_hybrid.h ../dump.h ../pair_hybrid.h ../pair_born_coul_wolf.h ../run.h ../output.h ../timer.h ../fix_recenter.h ../atom_vec_tri.h ../pair_coul_wolf.h ../pair_eam_cd.h ../modify.h ../accelerator_kokkos.h ../fix_nve.h ../fix_nve_limit.h ../atom_vec_atomic.h ../compute_dipole_chunk.h ../compute_erotate_sphere_atom.h ../pair_airebo.h ../style_angle.h ../fix_ave_atom.h ../fix_lineforce.h ../fix_momentum.h ../fix_tmd.h ../fix_wall_lj126.h ../lmptype.h ../pair_eam.h ../pair_coul_cut.h ../fix_deprecated.h ../fix_gravity.h ../fix_indent.h ../fix_store.h ../dump_cfg.h ../compute_msd.h ../pair_dpd_tstat.h ../pair_eam_fs.h ../domain.h ../fix_wall_lj1043.h ../compute_bond_local.h ../compute_displace_atom.h ../dihedral_hybrid.h ../min_sd.h ../create_atoms.h ../read_data.h ../atom.h ../comm.h ../input.h ../citeme.h ../fix_nph.h ../dump_movie.h ../style_fix.h ../fix_enforce2d.h ../fix_spring_chunk.h ../compute_angle.h ../compute_orientorder_atom.h ../pair_comb.h ../write_dump.h ../region.h ../universe.h ../atom_vec_ellipsoid.h ../dump_atom.h ../compute_ke_atom.h ../pair_lcbop.h ../fix_balance.h ../fix_spring_rg.h ../compute_temp_ramp.h ../pair_coul_debye.h ../region_block.h ../compute_global_atom.h ../displace_atoms.h ../minimize.h ../comm_brick.h ../angle_hybrid.h ../fix_respa.h ../style_bond.h ../atom_vec.h ../pair_tersoff_mod_c.h ../change_box.h ../read_dump.h ../bond.h ../style_atom.h ../dump_local.h ../compute_dihedral.h ../pair_buck_coul_cut.h ../pair_lj96_cut.h ../pair_table.h ../min_linesearch.h ../info.h ../read_restart.h ../fix_nve_sphere.h ../compute_angmom_chunk.h ../min.h ../rerun.h ../pair_vashishta.h ../fix_nh_sphere.h ../fix_ave_histo_weight.h ../compute_erotate_sphere.h ../pair_gw_zbl.h ../dump_xyz.h ../compute_contact_atom.h ../compute_heat_flux.h ../compute_pe.h ../compute_slice.h ../min_cg.h ../min_hftn.h ../fix_npt.h ../fix_nvt.h ../fix_print.h ../fix_store_force.h ../atom_vec_line.h ../compute_pressure.h ../create_box.h ../fix_ave_time.h ../compute_aggregate_atom.h ../compute_torque_chunk.h ../dihedral_zero.h ../fix_nve_noforce.h ../fix_temp_csvr.h ../improper_zero.h ../pair_airebo_morse.h ../pair_sw.h ../write_data.h ../region_union.h ../fix_aveforce.h ../fix_hp.h ../fix_spring.h ../pair_adp.h ../pair_comb3.h ../fix_nh.h ../my_pool_chunk.h ../error.h ../compute_com.h ../compute_property_atom.h ../pair_lj_cut_coul_cut.h ../pair_coul_streitz.h ../pair_ufm.h ../pair_vashishta_table.h ../compute.h ../compute_dihedral_local.h ../compute_rdf.h ../compute_temp_chunk.h ../pair_dpd.h ../pair_buck.h ../write_restart.h ../comm_tiled.h ../memory.h ../fix_controller.h ../fix_neigh_history.h ../fix_store_state.h ../style_dump.h ../compute_bond.h ../compute_cluster_atom.h ../compute_reduce_region.h ../compute_temp_com.h ../min_quickmin.h ../velocity.h ../fix_external.h ../fix_restrain.h ../fix_setforce.h ../fix_viscous.h ../compute_coord_atom.h ../math_const.h ../pair_morse.h ../fix_ave_correlate.h ../accelerator_omp.h ../compute_centro_atom.h ../compute_cna_atom.h ../bond_zero.h ../compute_pair.h ../pair_lj_cut_coul_wolf.h ../set.h ../fix_box_relax.h ../fix_wall_reflect.h ../compute_stress_atom.h ../pair_tersoff_mod.h ../fix_read_restart.h ../group.h
+ntopo_dihedral_partial.o : ../ntopo_dihedral_partial.cpp ../ntopo_dihedral_partial.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+nstencil_full_bin_3d.o : ../nstencil_full_bin_3d.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../nstencil_full_bin_3d.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+info.o : ../info.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../dump.h ../pair_hybrid.h ../output.h ../accelerator_kokkos.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../region.h ../universe.h ../comm_brick.h ../bond.h ../info.h ../variable.h ../error.h ../comm_tiled.h ../memory.h ../compute.h ../group.h
+npair_half_respa_bin_newton.o : ../npair_half_respa_bin_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../npair_half_respa_bin_newton.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+pair_lj_cut_coul_cut.o : ../pair_lj_cut_coul_cut.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../pair_lj_cut_coul_cut.h ../memory.h ../math_const.h
+fix_spring_chunk.o : ../fix_spring_chunk.cpp ../compute_chunk_atom.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../compute_com_chunk.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../fix_spring_chunk.h ../error.h ../compute.h ../memory.h
+compute_vcm_chunk.o : ../compute_vcm_chunk.cpp ../compute_chunk_atom.h ../compute_vcm_chunk.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+nstencil_full_ghost_bin_2d.o : ../nstencil_full_ghost_bin_2d.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil_full_ghost_bin_2d.h ../nstencil.h
+fix_deprecated.o : ../fix_deprecated.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../fix_deprecated.h ../lmptype.h ../comm.h ../error.h
+create_bonds.o : ../create_bonds.cpp ../special.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../create_bonds.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../group.h
+finish.o : ../finish.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../timer.h ../output.h ../accelerator_kokkos.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../finish.h ../molecule.h ../comm_brick.h ../atom_vec.h ../min.h ../neigh_request.h ../error.h ../comm_tiled.h ../memory.h ../accelerator_omp.h ../kspace.h
+npair_half_size_nsq_newtoff.o : ../npair_half_size_nsq_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_half_size_nsq_newtoff.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../npair.h ../atom.h ../atom_vec.h ../error.h ../group.h
+neighbor.o : ../neighbor.cpp ../nstencil_half_ghost_bin_2d_newtoff.h ../nbin.h ../nstencil_full_multi_2d.h ../npair_half_respa_nsq_newton.h ../nstencil_half_bin_3d_newton_tri.h ../ntopo_dihedral_partial.h ../npair_half_multi_newton_tri.h ../force.h ../neighbor.h ../ntopo_dihedral_template.h ../npair_half_multi_newton.h ../nstencil_half_multi_2d_newtoff.h ../pointers.h ../lammps.h ../nstencil_half_bin_2d_newton.h ../nstencil_half_bin_3d_newtoff.h ../npair_full_nsq.h ../npair_half_multi_newtoff.h ../npair_half_size_nsq_newtoff.h ../nstencil_half_multi_3d_newton.h ../ntopo_angle_partial.h ../ntopo_bond_all.h ../npair_half_size_bin_newtoff.h ../ntopo_improper_partial.h ../pair.h ../npair_half_nsq_newtoff.h ../npair_skip_size_off2on.h ../nstencil_half_multi_3d_newtoff.h ../exceptions.h ../npair_half_respa_bin_newtoff.h ../neigh_list.h ../npair_half_respa_bin_newton.h ../my_page.h ../ntopo.h ../nstencil_half_bin_3d_newton.h ../update.h ../npair_half_bin_newtoff_ghost.h ../respa.h ../nstencil_full_multi_3d.h ../npair_half_bin_newton.h ../style_nstencil.h ../nstencil_full_bin_3d.h ../fix.h ../nstencil_half_multi_2d_newton_tri.h ../ntopo_improper_all.h ../npair_full_bin_atomonly.h ../npair_skip_respa.h ../lmpwindows.h ../integrate.h ../nstencil_half_bin_2d_newtoff.h ../npair_halffull_newtoff.h ../output.h ../ntopo_improper_template.h ../npair_skip_size_off2on_oneside.h ../modify.h ../nstencil_half_multi_3d_newton_tri.h ../npair_half_bin_newtoff.h ../lmptype.h ../nbin_standard.h ../ntopo_bond_template.h ../domain.h ../npair.h ../atom.h ../comm.h ../citeme.h ../style_nbin.h ../npair_half_nsq_newtoff_ghost.h ../nstencil_half_multi_2d_newton.h ../atom_vec.h ../npair_halffull_newton.h ../npair_half_respa_bin_newton_tri.h ../npair_half_bin_newton_tri.h ../nstencil_half_ghost_bin_3d_newtoff.h ../neigh_request.h ../npair_skip_size.h ../style_ntopo.h ../ntopo_angle_all.h ../npair_half_respa_nsq_newtoff.h ../npair_skip.h ../npair_full_nsq_ghost.h ../nstencil_full_bin_2d.h ../nstencil_full_ghost_bin_2d.h ../nstencil_half_bin_2d_newton_tri.h ../error.h ../npair_copy.h ../npair_full_multi.h ../npair_half_size_nsq_newton.h ../nstencil_full_ghost_bin_3d.h ../nstencil.h ../compute.h ../memory.h ../npair_half_bin_atomonly_newton.h ../npair_half_size_bin_newton.h ../npair_half_size_bin_newton_tri.h ../npair_full_bin.h ../npair_full_bin_ghost.h ../ntopo_bond_partial.h ../style_npair.h ../npair_half_nsq_newton.h ../ntopo_angle_template.h ../ntopo_dihedral_all.h ../group.h
+comm_brick.o : ../comm_brick.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../math_extra.h ../pair.h ../exceptions.h ../fix.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../comm_brick.h ../atom_vec.h ../error.h ../comm_tiled.h ../compute.h ../memory.h ../group.h
+compute_gyration.o : ../compute_gyration.cpp ../pointers.h ../lammps.h ../exceptions.h ../compute_gyration.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../group.h
+thermo.o : ../thermo.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../timer.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../universe.h ../bond.h ../variable.h ../error.h ../compute.h ../memory.h ../math_const.h ../kspace.h ../lattice.h ../group.h
+imbalance_group.o : ../imbalance_group.cpp ../imbalance.h ../force.h ../pointers.h ../lammps.h ../imbalance_group.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../error.h ../group.h
+nstencil.o : ../nstencil.cpp ../nbin.h ../neighbor.h ../pointers.h ../lammps.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../neigh_request.h ../nstencil.h ../memory.h
+fix_vector.o : ../fix_vector.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix_vector.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+npair_skip_size.o : ../npair_skip_size.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../npair.h ../atom_vec.h ../npair_skip_size.h ../error.h
+molecule.o : ../molecule.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../atom_vec_body.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../molecule.h ../atom_vec.h ../error.h ../my_pool_chunk.h ../memory.h ../math_const.h
+fix_temp_csvr.o : ../fix_temp_csvr.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../random_mars.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../input.h ../variable.h ../fix_temp_csvr.h ../error.h ../memory.h ../compute.h ../group.h
+write_coeff.o : ../write_coeff.cpp ../force.h ../pointers.h ../lammps.h ../write_coeff.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../lmpwindows.h ../lmptype.h ../domain.h ../comm.h ../universe.h ../bond.h ../error.h
+velocity.o : ../velocity.cpp ../force.h ../pointers.h ../lammps.h ../compute_temp.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../comm.h ../variable.h ../error.h ../compute.h ../memory.h ../velocity.h ../random_park.h ../lattice.h ../group.h
+pair_buck_coul_cut.o : ../pair_buck_coul_cut.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_buck_coul_cut.h ../error.h ../memory.h ../math_const.h
+min_cg.o : ../min_cg.cpp ../pointers.h ../lammps.h ../update.h ../lmpwindows.h ../output.h ../timer.h ../lmptype.h ../atom.h ../min_linesearch.h ../min.h ../min_cg.h
+compute_heat_flux.o : ../compute_heat_flux.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../compute_heat_flux.h ../error.h ../compute.h ../group.h
+compute_stress_atom.o : ../compute_stress_atom.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../bond.h ../error.h ../memory.h ../compute.h ../kspace.h ../compute_stress_atom.h
+npair_half_size_bin_newtoff.o : ../npair_half_size_bin_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_half_size_bin_newtoff.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../npair.h ../atom.h ../atom_vec.h ../error.h
+npair_half_respa_bin_newtoff.o : ../npair_half_respa_bin_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_half_respa_bin_newtoff.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+pair_eim.o : ../pair_eim.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_eim.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+npair_full_nsq.o : ../npair_full_nsq.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_full_nsq.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../group.h
+imbalance_neigh.o : ../imbalance_neigh.cpp ../imbalance.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../imbalance_neigh.h ../atom.h ../comm.h ../neigh_request.h ../error.h
+dump_cfg.o : ../dump_cfg.cpp ../pointers.h ../lammps.h ../exceptions.h ../dump_custom.h ../fix.h ../lmpwindows.h ../dump.h ../modify.h ../lmptype.h ../dump_cfg.h ../domain.h ../atom.h ../comm.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h
+minimize.o : ../minimize.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../timer.h ../lmptype.h ../domain.h ../finish.h ../minimize.h ../min.h ../error.h
+pair_polymorphic.o : ../pair_polymorphic.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../pair_polymorphic.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+compute_erotate_sphere.o : ../compute_erotate_sphere.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../atom_vec.h ../compute_erotate_sphere.h ../error.h ../compute.h ../group.h
+fix_temp_rescale.o : ../fix_temp_rescale.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../fix_temp_rescale.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../region.h ../variable.h ../error.h ../compute.h ../group.h
+pair_eam_cd.o : ../pair_eam_cd.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_eam_alloy.h ../lmpwindows.h ../pair_eam_cd.h ../lmptype.h ../pair_eam.h ../atom.h ../comm.h ../error.h ../memory.h
+npair_skip.o : ../npair_skip.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_skip.h ../error.h
+fix_external.o : ../fix_external.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../error.h ../memory.h ../fix_external.h
+update.o : ../update.cpp ../min_fire.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../verlet.h ../style_integrate.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../style_minimize.h ../fix.h ../lmpwindows.h ../integrate.h ../output.h ../modify.h ../lmptype.h ../domain.h ../min_sd.h ../region.h ../min_linesearch.h ../min.h ../min_cg.h ../min_hftn.h ../error.h ../compute.h ../memory.h ../min_quickmin.h
+delete_bonds.o : ../delete_bonds.cpp ../special.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../delete_bonds.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../group.h
+ntopo_dihedral_template.o : ../ntopo_dihedral_template.cpp ../force.h ../ntopo_dihedral_template.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../memory.h
+variable.o : ../variable.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../python.h ../update.h ../fix.h ../lmpwindows.h ../random_mars.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../fix_store.h ../domain.h ../atom.h ../comm.h ../input.h ../universe.h ../region.h ../variable.h ../info.h ../atom_masks.h ../error.h ../compute.h ../memory.h ../math_const.h ../group.h
+compute_dihedral_local.o : ../compute_dihedral_local.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../dihedral.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../compute_dihedral_local.h ../compute.h ../memory.h ../math_const.h
+npair_skip_respa.o : ../npair_skip_respa.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../npair_skip_respa.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+fix_ave_histo.o : ../fix_ave_histo.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../fix_ave_histo.h ../modify.h ../lmptype.h ../atom.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+ntopo_improper_partial.o : ../ntopo_improper_partial.cpp ../force.h ../pointers.h ../lammps.h ../ntopo_improper_partial.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+displace_atoms.o : ../displace_atoms.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../atom_vec_body.h ../exceptions.h ../lmpwindows.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../atom_vec.h ../displace_atoms.h ../variable.h ../irregular.h ../atom_vec_line.h ../error.h ../my_pool_chunk.h ../memory.h ../math_const.h ../random_park.h ../lattice.h ../group.h
+npair_half_nsq_newtoff_ghost.o : ../npair_half_nsq_newtoff_ghost.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../npair_half_nsq_newtoff_ghost.h ../atom_vec.h ../error.h ../group.h
+npair_half_bin_newtoff.o : ../npair_half_bin_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../npair_half_bin_newtoff.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+compute_com_chunk.o : ../compute_com_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../compute_com_chunk.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+compute_temp_chunk.o : ../compute_temp_chunk.cpp ../compute_chunk_atom.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../compute_temp_chunk.h ../memory.h
+nstencil_half_multi_2d_newtoff.o : ../nstencil_half_multi_2d_newtoff.cpp ../neighbor.h ../nstencil_half_multi_2d_newtoff.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+min_linesearch.o : ../min_linesearch.cpp ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../fix_minimize.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../timer.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../min_linesearch.h ../min.h ../error.h
+pair_airebo_morse.o : ../pair_airebo_morse.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../my_page.h ../lmpwindows.h ../pair_airebo.h ../lmptype.h ../pair_airebo_morse.h ../error.h ../math_const.h
+npair_half_bin_newtoff_ghost.o : ../npair_half_bin_newtoff_ghost.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../npair_half_bin_newtoff_ghost.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+pair_born.o : ../pair_born.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_born.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+neigh_list.o : ../neigh_list.cpp ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h
+pair_airebo.o : ../pair_airebo.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../math_special.h ../lmpwindows.h ../pair_airebo.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+improper_zero.o : ../improper_zero.cpp ../force.h ../pointers.h ../lammps.h ../improper.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../improper_zero.h ../error.h ../memory.h
+rerun.o : ../rerun.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../integrate.h ../output.h ../timer.h ../modify.h ../lmptype.h ../domain.h ../finish.h ../read_dump.h ../rerun.h ../error.h
+verlet.o : ../verlet.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../verlet.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../integrate.h ../output.h ../timer.h ../modify.h ../lmptype.h ../domain.h ../comm.h ../atom.h ../atom_vec.h ../bond.h ../error.h ../compute.h ../memory.h ../kspace.h
+ntopo_angle_template.o : ../ntopo_angle_template.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../memory.h ../ntopo_angle_template.h
+atom.o : ../atom.cpp ../force.h ../neighbor.h ../atom_vec_sphere.h ../atom_vec_pafi.h ../pointers.h ../lammps.h ../atom_vec_charge.h ../atom_vec_body.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../atom_vec_hybrid.h ../output.h ../atom_vec_tri.h ../modify.h ../atom_vec_atomic.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../molecule.h ../atom_vec.h ../style_atom.h ../variable.h ../neigh_request.h ../atom_vec_line.h ../atom_masks.h ../my_pool_chunk.h ../error.h ../compute.h ../memory.h ../math_const.h ../group.h
+fix_press_berendsen.o : ../fix_press_berendsen.cpp ../force.h ../pointers.h ../lammps.h ../fix_deform.h ../fix_press_berendsen.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../compute.h ../kspace.h
+nstencil_half_multi_2d_newton.o : ../nstencil_half_multi_2d_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil_half_multi_2d_newton.h ../nstencil.h
+fix_wall_harmonic.o : ../fix_wall_harmonic.cpp ../fix_wall.h ../fix_wall_harmonic.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../error.h
+compute_chunk_atom.o : ../compute_chunk_atom.cpp ../compute_chunk_atom.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../atom.h ../comm.h ../input.h ../region.h ../variable.h ../error.h ../compute.h ../memory.h ../math_const.h ../lattice.h ../group.h
+min.o : ../min.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../fix_minimize.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../timer.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../bond.h ../min.h ../error.h ../compute.h ../memory.h ../kspace.h
+fix_print.o : ../fix_print.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../fix_print.h ../error.h ../memory.h
+math_extra.o : ../math_extra.cpp ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../error.h
+nstencil_half_bin_3d_newtoff.o : ../nstencil_half_bin_3d_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../nstencil_half_bin_3d_newtoff.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+nstencil_half_multi_3d_newton_tri.o : ../nstencil_half_multi_3d_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../nstencil_half_multi_3d_newton_tri.h ../lmptype.h ../atom.h ../nstencil.h
+fix_qeq_comb.o : ../fix_qeq_comb.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../fix_qeq_comb.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../pair_comb.h ../neigh_request.h ../pair_comb3.h ../error.h ../memory.h ../group.h
+ntopo_bond_template.o : ../ntopo_bond_template.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../ntopo_bond_template.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../memory.h
+pair_ufm.o : ../pair_ufm.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../pair_ufm.h ../memory.h ../math_const.h
+imbalance_time.o : ../imbalance_time.cpp ../imbalance.h ../force.h ../imbalance_time.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../timer.h ../lmptype.h ../atom.h ../comm.h ../error.h
+pair_lj_cut_coul_debye.o : ../pair_lj_cut_coul_debye.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_lj_cut_coul_debye.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../pair_lj_cut_coul_cut.h
+pair_mie_cut.o : ../pair_mie_cut.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../pair_mie_cut.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+imbalance_store.o : ../imbalance_store.cpp ../imbalance.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../imbalance_store.h ../atom.h ../input.h ../error.h
+fix_wall_reflect.o : ../fix_wall_reflect.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../variable.h ../error.h ../fix_wall_reflect.h ../lattice.h
+pair_tersoff_mod_c.o : ../pair_tersoff_mod_c.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_tersoff.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_tersoff_mod_c.h ../neigh_request.h ../error.h ../memory.h ../math_const.h ../pair_tersoff_mod.h
+bond_hybrid.o : ../bond_hybrid.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../bond_hybrid.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../bond.h ../error.h ../memory.h
+compute_aggregate_atom.o : ../compute_aggregate_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../atom_vec.h ../neigh_request.h ../compute_aggregate_atom.h ../error.h ../compute.h ../memory.h ../group.h
+read_data.o : ../read_data.cpp ../special.h ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../read_data.h ../atom.h ../comm.h ../atom_vec_ellipsoid.h ../molecule.h ../atom_vec.h ../bond.h ../irregular.h ../atom_vec_line.h ../error.h ../memory.h ../group.h
+atom_vec_pafi.o : ../atom_vec_pafi.cpp ../atom_vec_pafi.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h
+improper.o : ../improper.cpp ../force.h ../suffix.h ../pointers.h ../lammps.h ../improper.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../memory.h
+compute_reduce_region.o : ../compute_reduce_region.cpp ../pointers.h ../lammps.h ../compute_reduce.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../error.h ../memory.h ../compute.h ../compute_reduce_region.h ../group.h
+fix_ave_histo_weight.o : ../fix_ave_histo_weight.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../fix_ave_histo.h ../modify.h ../lmptype.h ../atom.h ../input.h ../variable.h ../fix_ave_histo_weight.h ../error.h ../compute.h ../memory.h ../group.h
+pair_comb.o : ../pair_comb.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_comb.h ../neigh_request.h ../error.h ../memory.h ../math_const.h ../group.h
+npair_half_size_nsq_newton.o : ../npair_half_size_nsq_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../npair.h ../atom_vec.h ../npair_half_size_nsq_newton.h ../error.h ../group.h
+pair_eam.o : ../pair_eam.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../pair_eam.h ../atom.h ../comm.h ../error.h ../memory.h
+pair_coul_streitz.o : ../pair_coul_streitz.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../pair_coul_streitz.h ../memory.h ../math_const.h ../kspace.h ../group.h
+fix_viscous.o : ../fix_viscous.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../error.h ../fix_viscous.h
+dump_image.o : ../dump_image.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../image.h ../atom_vec_body.h ../exceptions.h ../dump_image.h ../dump_custom.h ../body.h ../fix.h ../lmpwindows.h ../dump.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../molecule.h ../atom_vec.h ../variable.h ../atom_vec_line.h ../error.h ../my_pool_chunk.h ../memory.h ../math_const.h ../group.h
+npair_half_size_bin_newton.o : ../npair_half_size_bin_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../npair.h ../atom_vec.h ../error.h ../npair_half_size_bin_newton.h
+compute_temp_ramp.o : ../compute_temp_ramp.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../compute_temp_ramp.h ../error.h ../compute.h ../memory.h ../lattice.h ../group.h
+compute_pair.o : ../compute_pair.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../error.h ../compute.h ../compute_pair.h
+rcb.o : ../rcb.cpp ../rcb.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../irregular.h ../error.h ../memory.h
+compute_temp.o : ../compute_temp.cpp ../force.h ../pointers.h ../lammps.h ../compute_temp.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../compute.h ../group.h
+error.o : ../error.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../output.h ../lmptype.h ../input.h ../universe.h ../error.h
+compute_pressure.o : ../compute_pressure.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../bond.h ../compute_pressure.h ../error.h ../compute.h ../kspace.h
+nbin_standard.o : ../nbin_standard.cpp ../nbin.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../nbin_standard.h ../domain.h ../atom.h ../comm.h ../error.h ../group.h
+npair_half_multi_newtoff.o : ../npair_half_multi_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../npair_half_multi_newtoff.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+fix_property_atom.o : ../fix_property_atom.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../fix_property_atom.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+compute_global_atom.o : ../compute_global_atom.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../compute_global_atom.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+delete_atoms.o : ../delete_atoms.cpp ../force.h ../delete_atoms.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../random_mars.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../region.h ../molecule.h ../atom_vec.h ../neigh_request.h ../error.h ../memory.h ../group.h
+fix_nph.o : ../fix_nph.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_nph.h ../fix_nh.h ../error.h
+fix.o : ../fix.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../memory.h ../group.h
+atom_vec_charge.o : ../atom_vec_charge.cpp ../atom_vec_charge.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h
+fix_nve_noforce.o : ../fix_nve_noforce.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../fix_nve_noforce.h ../error.h
+pair_sw.o : ../pair_sw.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../pair_sw.h ../error.h ../memory.h
+pair_lj_cubic.o : ../pair_lj_cubic.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../pair_lj_cubic.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+compute_displace_atom.o : ../compute_displace_atom.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../compute_displace_atom.h ../atom.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+npair.o : ../npair.cpp ../nbin.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../npair.h ../atom.h ../neigh_request.h ../error.h ../nstencil.h ../memory.h
+compute_dihedral.o : ../compute_dihedral.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../dihedral.h ../update.h ../lmpwindows.h ../lmptype.h ../dihedral_hybrid.h ../compute_dihedral.h ../error.h ../compute.h
+pair_rebo.o : ../pair_rebo.cpp ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../my_page.h ../pair_rebo.h ../lmpwindows.h ../pair_airebo.h ../lmptype.h ../error.h ../math_const.h
+npair_half_bin_newton.o : ../npair_half_bin_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../npair_half_bin_newton.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+pair_coul_wolf.o : ../pair_coul_wolf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../pair_coul_wolf.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+pair_yukawa.o : ../pair_yukawa.cpp ../pair_yukawa.h ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+main.o : ../main.cpp ../lammps.h ../pointers.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../input.h ../error.h
+pair_vashishta.o : ../pair_vashishta.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../pair_vashishta.h ../error.h ../memory.h
+create_box.o : ../create_box.cpp ../region_prism.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../region.h ../atom_vec.h ../create_box.h ../error.h
+npair_half_size_bin_newton_tri.o : ../npair_half_size_bin_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../npair.h ../atom_vec.h ../error.h ../npair_half_size_bin_newton_tri.h
+pair_zbl.o : ../pair_zbl.cpp ../force.h ../neighbor.h ../pair_zbl.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+pair_lj_cut_coul_wolf.o : ../pair_lj_cut_coul_wolf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h ../pair_lj_cut_coul_wolf.h
+nstencil_half_multi_3d_newtoff.o : ../nstencil_half_multi_3d_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../nstencil_half_multi_3d_newtoff.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+compute_bond_local.o : ../compute_bond_local.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../compute_bond_local.h ../atom.h ../comm.h ../molecule.h ../atom_vec.h ../bond.h ../error.h ../compute.h ../memory.h
+dump_movie.o : ../dump_movie.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../dump_image.h ../dump_custom.h ../lmpwindows.h ../dump.h ../lmptype.h ../dump_movie.h ../comm.h ../error.h ../memory.h
+npair_full_bin_atomonly.o : ../npair_full_bin_atomonly.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../npair_full_bin_atomonly.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../atom_vec.h ../error.h
+math_special.o : ../math_special.cpp ../math_special.h
+compute_improper_local.o : ../compute_improper_local.cpp ../compute_improper_local.h ../force.h ../pointers.h ../lammps.h ../improper.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../compute.h ../memory.h ../math_const.h
+fix_dt_reset.o : ../fix_dt_reset.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../update.h ../fix_dt_reset.h ../fix.h ../lmpwindows.h ../integrate.h ../dump.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../lattice.h
+compute_inertia_chunk.o : ../compute_inertia_chunk.cpp ../compute_chunk_atom.h ../compute_inertia_chunk.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+fix_addforce.o : ../fix_addforce.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix_addforce.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../atom_masks.h ../error.h ../memory.h
+citeme.o : ../citeme.cpp ../pointers.h ../lammps.h ../exceptions.h ../version.h ../lmpwindows.h ../lmptype.h ../citeme.h ../universe.h ../error.h
+nstencil_half_bin_3d_newton.o : ../nstencil_half_bin_3d_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../nstencil_half_bin_3d_newton.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+random_park.o : ../random_park.cpp ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../error.h ../random_park.h
+set.o : ../set.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../math_extra.h ../pair.h ../atom_vec_body.h ../exceptions.h ../lmpwindows.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../region.h ../atom_vec.h ../variable.h ../atom_vec_line.h ../error.h ../my_pool_chunk.h ../memory.h ../random_park.h ../math_const.h ../set.h ../group.h
+min_quickmin.o : ../min_quickmin.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../output.h ../timer.h ../lmptype.h ../atom.h ../universe.h ../min.h ../error.h ../min_quickmin.h
+npair_half_bin_newton_tri.o : ../npair_half_bin_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_half_bin_newton_tri.h ../error.h
+fix_npt_sphere.o : ../fix_npt_sphere.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../fix_npt_sphere.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_nh_sphere.h ../fix_nh.h ../error.h
+pair_dpd_tstat.o : ../pair_dpd_tstat.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../random_mars.h ../lmptype.h ../pair_dpd_tstat.h ../atom.h ../comm.h ../error.h ../pair_dpd.h
+compute_centro_atom.o : ../compute_centro_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../math_extra.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../compute.h ../compute_centro_atom.h
+comm.o : ../comm.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../fix.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../accelerator_kokkos.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../comm_brick.h ../atom_vec.h ../error.h ../comm_tiled.h ../memory.h ../compute.h ../procmap.h ../group.h
+write_data.o : ../write_data.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../atom_vec.h ../bond.h ../write_data.h ../error.h ../memory.h ../group.h
+body.o : ../body.cpp ../pointers.h ../lammps.h ../atom_vec_body.h ../exceptions.h ../body.h ../lmpwindows.h ../lmptype.h ../atom_vec.h ../my_pool_chunk.h ../error.h
+compute_bond.o : ../compute_bond.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../bond_hybrid.h ../update.h ../lmpwindows.h ../lmptype.h ../bond.h ../error.h ../compute.h ../compute_bond.h
+compute_fragment_atom.o : ../compute_fragment_atom.cpp ../compute_fragment_atom.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../compute.h ../memory.h ../group.h
+fix_momentum.o : ../fix_momentum.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../fix_momentum.h ../lmptype.h ../domain.h ../atom.h ../error.h ../group.h
+fix_store_force.o : ../fix_store_force.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../fix_store_force.h ../error.h ../memory.h ../group.h
+procmap.o : ../procmap.cpp ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../comm.h ../universe.h ../error.h ../memory.h ../procmap.h
+region_block.o : ../region_block.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../region.h ../region_block.h ../error.h
+improper_hybrid.o : ../improper_hybrid.cpp ../improper_hybrid.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../improper.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../memory.h
+fix_nvt_sllod.o : ../fix_nvt_sllod.cpp ../fix_nvt_sllod.h ../pointers.h ../lammps.h ../math_extra.h ../fix_deform.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../fix_nh.h ../error.h ../compute.h ../group.h
+compute_torque_chunk.o : ../compute_torque_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../compute_torque_chunk.h ../error.h ../compute.h ../memory.h
+pair.o : ../pair.cpp ../force.h ../neighbor.h ../suffix.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../compute.h ../memory.h ../math_const.h ../kspace.h
+reader_xyz.o : ../reader_xyz.cpp ../force.h ../pointers.h ../lammps.h ../reader_xyz.h ../exceptions.h ../lmpwindows.h ../reader.h ../lmptype.h ../atom.h ../error.h ../memory.h
+nstencil_half_multi_3d_newton.o : ../nstencil_half_multi_3d_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../nstencil_half_multi_3d_newton.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+pair_coul_debye.o : ../pair_coul_debye.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../pair_coul_cut.h ../atom.h ../comm.h ../pair_coul_debye.h ../error.h ../memory.h
+lattice.o : ../lattice.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../comm.h ../error.h ../memory.h ../lattice.h
+compute_temp_profile.o : ../compute_temp_profile.cpp ../force.h ../compute_temp_profile.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h ../group.h
+compute_property_chunk.o : ../compute_property_chunk.cpp ../compute_chunk_atom.h ../pointers.h ../lammps.h ../compute_property_chunk.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../error.h ../compute.h ../memory.h
+nstencil_half_bin_3d_newton_tri.o : ../nstencil_half_bin_3d_newton_tri.cpp ../nstencil_half_bin_3d_newton_tri.h ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil.h
+fix_nvt_sphere.o : ../fix_nvt_sphere.cpp ../pointers.h ../lammps.h ../fix_nvt_sphere.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_nh_sphere.h ../fix_nh.h ../error.h ../group.h
+fix_group.o : ../fix_group.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix_group.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../region.h ../variable.h ../error.h ../memory.h ../group.h
+fix_npt.o : ../fix_npt.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_npt.h ../fix_nh.h ../error.h
+special.o : ../special.cpp ../special.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../accelerator_kokkos.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../comm_brick.h ../atom_vec.h ../atom_masks.h ../error.h ../comm_tiled.h ../memory.h
+pair_hybrid_overlay.o : ../pair_hybrid_overlay.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../pair_hybrid_overlay.h ../lmpwindows.h ../pair_hybrid.h ../lmptype.h ../atom.h ../neigh_request.h ../error.h
+compute_ke_atom.o : ../compute_ke_atom.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../compute_ke_atom.h ../error.h ../compute.h ../memory.h
+fix_ave_correlate.o : ../fix_ave_correlate.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h ../fix_ave_correlate.h
+npair_copy.o : ../npair_copy.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_copy.h ../error.h
+compute.o : ../compute.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../compute.h ../memory.h ../group.h
+compute_property_atom.o : ../compute_property_atom.cpp ../pointers.h ../lammps.h ../math_extra.h ../atom_vec_body.h ../exceptions.h ../update.h ../lmpwindows.h ../atom_vec_tri.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec_ellipsoid.h ../atom_vec.h ../atom_vec_line.h ../error.h ../my_pool_chunk.h ../compute_property_atom.h ../compute.h ../memory.h
+random_mars.o : ../random_mars.cpp ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../random_mars.h ../lmptype.h ../error.h
+change_box.o : ../change_box.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../change_box.h ../irregular.h ../error.h ../lattice.h ../group.h
+fix_minimize.o : ../fix_minimize.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix_minimize.h ../fix.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+ntopo_improper_all.o : ../ntopo_improper_all.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../ntopo_improper_all.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+atom_vec_sphere.o : ../atom_vec_sphere.cpp ../force.h ../atom_vec_sphere.h ../fix_adapt.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h ../math_const.h
+atom_vec_hybrid.o : ../atom_vec_hybrid.cpp ../atom_vec_sphere.h ../atom_vec_pafi.h ../pointers.h ../lammps.h ../atom_vec_charge.h ../atom_vec_body.h ../exceptions.h ../fix.h ../lmpwindows.h ../atom_vec_hybrid.h ../atom_vec_tri.h ../modify.h ../atom_vec_atomic.h ../lmptype.h ../domain.h ../atom.h ../atom_vec_ellipsoid.h ../atom_vec.h ../style_atom.h ../atom_vec_line.h ../my_pool_chunk.h ../error.h ../memory.h
+pair_morse.o : ../pair_morse.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../pair_morse.h
+write_restart.o : ../write_restart.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../fix.h ../lmpwindows.h ../atom_vec_hybrid.h ../output.h ../modify.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../universe.h ../mpiio.h ../atom_vec.h ../bond.h ../error.h ../write_restart.h ../memory.h ../group.h
+dump_dcd.o : ../dump_dcd.cpp ../dump_dcd.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../dump.h ../output.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h ../group.h
+min_sd.o : ../min_sd.cpp ../pointers.h ../lammps.h ../update.h ../lmpwindows.h ../output.h ../timer.h ../lmptype.h ../min_sd.h ../atom.h ../min_linesearch.h ../min.h
+region_prism.o : ../region_prism.cpp ../region_prism.h ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../region.h ../error.h
+compute_erotate_sphere_atom.o : ../compute_erotate_sphere_atom.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../compute_erotate_sphere_atom.h ../lmptype.h ../atom.h ../comm.h ../error.h ../compute.h ../memory.h
+atom_vec_body.o : ../atom_vec_body.cpp ../style_body.h ../force.h ../pointers.h ../lammps.h ../atom_vec_body.h ../exceptions.h ../body.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../my_pool_chunk.h ../error.h ../memory.h
+pair_eam_fs.o : ../pair_eam_fs.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../pair_eam.h ../pair_eam_fs.h ../atom.h ../comm.h ../error.h ../memory.h
+pair_buck.o : ../pair_buck.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../pair_buck.h ../memory.h ../math_const.h
+pair_nb3b_harmonic.o : ../pair_nb3b_harmonic.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair_nb3b_harmonic.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h
+npair_full_bin_ghost.o : ../npair_full_bin_ghost.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../error.h ../npair_full_bin_ghost.h
+python.o : ../python.cpp ../pointers.h ../lammps.h ../exceptions.h ../python.h ../lmpwindows.h ../lmptype.h ../error.h
+kspace.o : ../kspace.cpp ../force.h ../suffix.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../memory.h ../kspace.h
+compute_temp_com.o : ../compute_temp_com.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../compute_temp_com.h ../lattice.h ../group.h
+atom_vec_ellipsoid.o : ../atom_vec_ellipsoid.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec_ellipsoid.h ../atom_vec.h ../error.h ../memory.h ../math_const.h
+fix_controller.o : ../fix_controller.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../input.h ../variable.h ../error.h ../fix_controller.h ../compute.h
+fix_indent.o : ../fix_indent.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../output.h ../modify.h ../lmptype.h ../fix_indent.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../lattice.h
+pair_born_coul_dsf.o : ../pair_born_coul_dsf.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair_born_coul_dsf.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../math_special.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+nstencil_full_multi_2d.o : ../nstencil_full_multi_2d.cpp ../nstencil_full_multi_2d.h ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../nstencil.h
+region_cylinder.o : ../region_cylinder.cpp ../force.h ../region_cylinder.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../input.h ../region.h ../variable.h ../error.h
+comm_tiled.o : ../comm_tiled.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../fix.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../comm_brick.h ../atom_vec.h ../error.h ../comm_tiled.h ../compute.h ../memory.h
+pair_coul_cut.o : ../pair_coul_cut.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../pair_coul_cut.h ../atom.h ../comm.h ../error.h ../memory.h
+npair_half_respa_nsq_newton.o : ../npair_half_respa_nsq_newton.cpp ../npair_half_respa_nsq_newton.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h ../group.h
+compute_msd.o : ../compute_msd.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_store.h ../compute_msd.h ../domain.h ../atom.h ../error.h ../compute.h ../group.h
+read_dump.o : ../read_dump.cpp ../force.h ../style_reader.h ../pointers.h ../lammps.h ../reader_xyz.h ../exceptions.h ../update.h ../reader_native.h ../fix.h ../lmpwindows.h ../reader.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec.h ../read_dump.h ../variable.h ../irregular.h ../error.h ../compute.h ../memory.h
+fix_store.o : ../fix_store.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../lmptype.h ../fix_store.h ../atom.h ../comm.h ../error.h ../memory.h
+run.o : ../run.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../integrate.h ../run.h ../output.h ../timer.h ../modify.h ../lmptype.h ../domain.h ../input.h ../finish.h ../error.h
+group.o : ../group.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../fix.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../region.h ../variable.h ../error.h ../compute.h ../memory.h ../group.h
+dump_xyz.o : ../dump_xyz.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../dump.h ../lmptype.h ../atom.h ../dump_xyz.h ../error.h ../memory.h ../group.h
+pair_eam_alloy.o : ../pair_eam_alloy.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../pair_eam_alloy.h ../lmpwindows.h ../lmptype.h ../pair_eam.h ../atom.h ../comm.h ../error.h ../memory.h
+fix_deform.o : ../fix_deform.cpp ../force.h ../pointers.h ../lammps.h ../fix_deform.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../variable.h ../irregular.h ../error.h ../math_const.h ../kspace.h ../lattice.h
+fix_balance.o : ../fix_balance.cpp ../force.h ../neighbor.h ../rcb.h ../pointers.h ../lammps.h ../exceptions.h ../balance.h ../update.h ../fix.h ../lmpwindows.h ../timer.h ../modify.h ../lmptype.h ../fix_store.h ../domain.h ../atom.h ../comm.h ../fix_balance.h ../irregular.h ../error.h ../kspace.h
+fix_heat.o : ../fix_heat.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../fix_heat.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../error.h ../memory.h ../group.h
+npair_half_respa_bin_newton_tri.o : ../npair_half_respa_bin_newton_tri.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_half_respa_bin_newton_tri.h ../error.h
+fix_adapt.o : ../fix_adapt.cpp ../force.h ../fix_adapt.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../pair_hybrid.h ../modify.h ../lmptype.h ../fix_store.h ../atom.h ../input.h ../bond.h ../variable.h ../error.h ../memory.h ../math_const.h ../kspace.h ../group.h
+npair_half_multi_newton.o : ../npair_half_multi_newton.cpp ../npair_half_multi_newton.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+fix_nve_limit.o : ../fix_nve_limit.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../fix_nve_limit.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../error.h
+compute_temp_partial.o : ../compute_temp_partial.cpp ../compute_temp_partial.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h ../group.h
+atom_vec_atomic.o : ../atom_vec_atomic.cpp ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../atom_vec_atomic.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../error.h ../memory.h
+fix_temp_berendsen.o : ../fix_temp_berendsen.cpp ../force.h ../pointers.h ../lammps.h ../fix_temp_berendsen.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../input.h ../variable.h ../error.h ../compute.h ../group.h
+ntopo_angle_all.o : ../ntopo_angle_all.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../ntopo_angle_all.h ../error.h ../memory.h
+fix_restrain.o : ../fix_restrain.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../error.h ../memory.h ../fix_restrain.h ../math_const.h
+compute_vacf.o : ../compute_vacf.cpp ../compute_vacf.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_store.h ../atom.h ../error.h ../compute.h ../group.h
+compute_cluster_atom.o : ../compute_cluster_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../compute.h ../compute_cluster_atom.h ../group.h
+npair_half_bin_atomonly_newton.o : ../npair_half_bin_atomonly_newton.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../error.h ../npair_half_bin_atomonly_newton.h
+dump_atom.o : ../dump_atom.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../dump.h ../lmptype.h ../domain.h ../atom.h ../dump_atom.h ../error.h ../memory.h ../group.h
+atom_vec.o : ../atom_vec.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../atom_vec.h ../error.h
+compute_orientorder_atom.o : ../compute_orientorder_atom.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../compute_orientorder_atom.h ../neigh_request.h ../error.h ../compute.h ../memory.h ../math_const.h
+pair_adp.o : ../pair_adp.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../pair_adp.h ../error.h ../memory.h
+dump.o : ../dump.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../dump.h ../output.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../irregular.h ../error.h ../compute.h ../memory.h ../mergesort.h ../group.h
+fix_aveforce.o : ../fix_aveforce.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../fix_aveforce.h ../error.h
+dump_local.o : ../dump_local.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../dump.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../dump_local.h ../error.h ../compute.h ../memory.h
+fix_move.o : ../fix_move.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../atom_vec_body.h ../exceptions.h ../fix_move.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../atom_vec_tri.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../input.h ../atom_vec_ellipsoid.h ../atom_vec.h ../variable.h ../atom_vec_line.h ../error.h ../my_pool_chunk.h ../memory.h ../math_const.h ../lattice.h ../group.h
+angle.o : ../angle.cpp ../force.h ../suffix.h ../pointers.h ../lammps.h ../exceptions.h ../angle.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../atom_masks.h ../error.h ../memory.h ../math_const.h
+pair_gauss.o : ../pair_gauss.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair_gauss.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+dihedral_zero.o : ../dihedral_zero.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../dihedral.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../dihedral_zero.h ../error.h ../memory.h
+ntopo_bond_all.o : ../ntopo_bond_all.cpp ../force.h ../pointers.h ../lammps.h ../ntopo_bond_all.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+region_union.o : ../region_union.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../region.h ../region_union.h ../error.h
+pair_vashishta_table.o : ../pair_vashishta_table.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../pair_vashishta.h ../error.h ../pair_vashishta_table.h ../memory.h
+npair_half_multi_newton_tri.o : ../npair_half_multi_newton_tri.cpp ../npair_half_multi_newton_tri.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+fix_halt.o : ../fix_halt.cpp ../fix_halt.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../timer.h ../modify.h ../lmptype.h ../input.h ../atom.h ../comm.h ../variable.h ../error.h
+npair_halffull_newtoff.o : ../npair_halffull_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../npair_halffull_newtoff.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../molecule.h ../atom_vec.h ../error.h
+fix_box_relax.o : ../fix_box_relax.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../compute.h ../kspace.h ../fix_box_relax.h
+fix_ave_atom.o : ../fix_ave_atom.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../fix_ave_atom.h ../lmptype.h ../domain.h ../atom.h ../input.h ../variable.h ../error.h ../compute.h ../memory.h
+fix_lineforce.o : ../fix_lineforce.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../fix_lineforce.h ../lmptype.h ../atom.h ../error.h
+fix_wall_lj126.o : ../fix_wall_lj126.cpp ../fix_wall.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../fix_wall_lj126.h ../lmptype.h ../atom.h ../error.h
+pair_gw.o : ../pair_gw.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../pair_gw.h ../my_page.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+fix_nph_sphere.o : ../fix_nph_sphere.cpp ../fix_nph_sphere.h ../pointers.h ../lammps.h ../exceptions.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../fix_nh_sphere.h ../fix_nh.h ../error.h
+fix_nve_sphere.o : ../fix_nve_sphere.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../fix_nve.h ../lmptype.h ../math_vector.h ../domain.h ../atom.h ../atom_vec.h ../fix_nve_sphere.h ../error.h
+compute_pe.o : ../compute_pe.cpp ../force.h ../pointers.h ../lammps.h ../pair.h ../improper.h ../exceptions.h ../angle.h ../dihedral.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../bond.h ../compute_pe.h ../error.h ../compute.h ../kspace.h
+region_cone.o : ../region_cone.cpp ../region_cone.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../domain.h ../region.h ../error.h
+compute_gyration_chunk.o : ../compute_gyration_chunk.cpp ../compute_chunk_atom.h ../compute_gyration_chunk.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../memory.h
+fix_neigh_history.o : ../fix_neigh_history.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../fix.h ../lmpwindows.h ../modify.h ../lmptype.h ../atom.h ../comm.h ../error.h ../fix_neigh_history.h ../memory.h
+fix_spring_rg.o : ../fix_spring_rg.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../domain.h ../atom.h ../fix_spring_rg.h ../error.h ../group.h
+pair_lj96_cut.o : ../pair_lj96_cut.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../respa.h ../lmpwindows.h ../integrate.h ../lmptype.h ../atom.h ../comm.h ../pair_lj96_cut.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+irregular.o : ../irregular.cpp ../pointers.h ../lammps.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../irregular.h ../memory.h ../mergesort.h
+modify.o : ../modify.cpp ../compute_chunk_atom.h ../compute_temp_deform.h ../fix_halt.h ../fix_nph_sphere.h ../style_compute.h ../compute_gyration_chunk.h ../fix_wall.h ../compute_improper_local.h ../compute_inertia_chunk.h ../compute_property_local.h ../compute_temp_partial.h ../fix_spring_self.h ../fix_wall_harmonic.h ../compute_vcm_chunk.h ../compute_fragment_atom.h ../compute_omega_chunk.h ../compute_pair_local.h ../compute_vacf.h ../compute_temp_profile.h ../fix_adapt.h ../fix_nvt_sllod.h ../pointers.h ../lammps.h ../compute_ke.h ../compute_temp_sphere.h ../compute_property_chunk.h ../compute_temp.h ../fix_ave_chunk.h ../fix_drag.h ../fix_nvt_sphere.h ../fix_temp_berendsen.h ../compute_reduce.h ../fix_wall_region.h ../fix_deform.h ../fix_planeforce.h ../compute_pe_atom.h ../fix_move.h ../fix_press_berendsen.h ../fix_qeq_comb.h ../exceptions.h ../compute_improper.h ../fix_minimize.h ../fix_vector.h ../fix_wall_lj93.h ../compute_group_group.h ../my_page.h ../compute_gyration.h ../update.h ../fix_heat.h ../compute_angle_local.h ../compute_com_chunk.h ../compute_msd_chunk.h ../fix_addforce.h ../fix_dt_reset.h ../fix_group.h ../fix.h ../fix_langevin.h ../fix_property_atom.h ../fix_temp_csld.h ../lmpwindows.h ../compute_temp_region.h ../fix_ave_histo.h ../fix_npt_sphere.h ../compute_hexorder_atom.h ../fix_temp_rescale.h ../fix_recenter.h ../modify.h ../fix_nve.h ../fix_nve_limit.h ../compute_dipole_chunk.h ../compute_erotate_sphere_atom.h ../fix_ave_atom.h ../fix_lineforce.h ../fix_momentum.h ../fix_tmd.h ../fix_wall_lj126.h ../lmptype.h ../fix_deprecated.h ../fix_gravity.h ../fix_indent.h ../fix_store.h ../compute_msd.h ../domain.h ../fix_wall_lj1043.h ../compute_bond_local.h ../compute_displace_atom.h ../atom.h ../comm.h ../input.h ../fix_nph.h ../style_fix.h ../fix_enforce2d.h ../fix_spring_chunk.h ../compute_angle.h ../compute_orientorder_atom.h ../region.h ../compute_ke_atom.h ../fix_balance.h ../fix_spring_rg.h ../compute_temp_ramp.h ../compute_global_atom.h ../fix_respa.h ../compute_dihedral.h ../fix_nve_sphere.h ../variable.h ../compute_angmom_chunk.h ../fix_nh_sphere.h ../fix_ave_histo_weight.h ../compute_erotate_sphere.h ../compute_contact_atom.h ../compute_heat_flux.h ../compute_pe.h ../compute_slice.h ../fix_npt.h ../fix_nvt.h ../fix_print.h ../fix_store_force.h ../compute_pressure.h ../fix_ave_time.h ../compute_aggregate_atom.h ../compute_torque_chunk.h ../fix_nve_noforce.h ../fix_temp_csvr.h ../fix_aveforce.h ../fix_hp.h ../fix_spring.h ../fix_nh.h ../error.h ../compute_com.h ../compute_property_atom.h ../compute.h ../compute_dihedral_local.h ../compute_rdf.h ../compute_temp_chunk.h ../fix_controller.h ../fix_neigh_history.h ../fix_store_state.h ../memory.h ../compute_bond.h ../compute_cluster_atom.h ../compute_reduce_region.h ../compute_temp_com.h ../fix_external.h ../fix_restrain.h ../fix_setforce.h ../fix_viscous.h ../compute_coord_atom.h ../fix_ave_correlate.h ../compute_centro_atom.h ../compute_cna_atom.h ../compute_pair.h ../fix_box_relax.h ../fix_wall_reflect.h ../compute_stress_atom.h ../fix_read_restart.h ../group.h
+npair_half_respa_nsq_newtoff.o : ../npair_half_respa_nsq_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../npair.h ../molecule.h ../atom_vec.h ../npair_half_respa_nsq_newtoff.h ../error.h ../group.h
+memory.o : ../memory.cpp ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../error.h ../memory.h
+pair_tersoff.o : ../pair_tersoff.cpp ../force.h ../neighbor.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../pair_tersoff.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../neigh_request.h ../error.h ../memory.h ../math_const.h
+fix_setforce.o : ../fix_setforce.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../input.h ../region.h ../variable.h ../error.h ../memory.h ../fix_setforce.h
+ntopo.o : ../ntopo.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../ntopo.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../error.h ../memory.h
+compute_ke.o : ../compute_ke.cpp ../force.h ../pointers.h ../lammps.h ../compute_ke.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../domain.h ../atom.h ../error.h ../compute.h ../group.h
+atom_map.o : ../atom_map.cpp ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h
+pair_soft.o : ../pair_soft.cpp ../pair_soft.h ../force.h ../pointers.h ../lammps.h ../pair.h ../exceptions.h ../neigh_list.h ../my_page.h ../update.h ../lmpwindows.h ../lmptype.h ../atom.h ../comm.h ../error.h ../memory.h ../math_const.h
+replicate.o : ../replicate.cpp ../special.h ../force.h ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../replicate.h ../atom_vec_hybrid.h ../accelerator_kokkos.h ../modify.h ../lmptype.h ../domain.h ../atom.h ../comm.h ../atom_vec.h ../comm_brick.h ../error.h ../comm_tiled.h ../memory.h
+ntopo_angle_partial.o : ../ntopo_angle_partial.cpp ../force.h ../pointers.h ../lammps.h ../ntopo_angle_partial.h ../exceptions.h ../ntopo.h ../update.h ../lmpwindows.h ../output.h ../thermo.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+fix_spring_self.o : ../fix_spring_self.cpp ../fix_spring_self.h ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../lmptype.h ../domain.h ../atom.h ../error.h ../memory.h
+fix_nve.o : ../fix_nve.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../update.h ../respa.h ../fix.h ../lmpwindows.h ../integrate.h ../fix_nve.h ../lmptype.h ../atom.h ../error.h
+fix_nh_sphere.o : ../fix_nh_sphere.cpp ../force.h ../pointers.h ../lammps.h ../math_extra.h ../exceptions.h ../fix.h ../lmpwindows.h ../lmptype.h ../math_vector.h ../domain.h ../atom.h ../atom_vec.h ../fix_nh_sphere.h ../error.h ../fix_nh.h ../group.h
+nstencil_full_bin_2d.o : ../nstencil_full_bin_2d.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../lmptype.h ../nstencil_full_bin_2d.h ../nstencil.h
+npair_skip_size_off2on_oneside.o : ../npair_skip_size_off2on_oneside.cpp ../neighbor.h ../pointers.h ../lammps.h ../exceptions.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../npair_skip_size_off2on_oneside.h ../lmptype.h ../domain.h ../npair.h ../atom.h ../atom_vec.h ../error.h
+fix_read_restart.o : ../fix_read_restart.cpp ../force.h ../pointers.h ../lammps.h ../fix.h ../lmpwindows.h ../lmptype.h ../atom.h ../memory.h ../fix_read_restart.h
+compute_com.o : ../compute_com.cpp ../pointers.h ../lammps.h ../exceptions.h ../update.h ../lmpwindows.h ../lmptype.h ../error.h ../compute_com.h ../compute.h ../group.h
+timer.o : ../timer.cpp ../force.h ../pointers.h ../lammps.h ../exceptions.h ../lmpwindows.h ../timer.h ../lmptype.h ../comm.h ../error.h ../memory.h
+nstencil_half_bin_2d_newtoff.o : ../nstencil_half_bin_2d_newtoff.cpp ../neighbor.h ../pointers.h ../lammps.h ../neigh_list.h ../my_page.h ../lmpwindows.h ../nstencil_half_bin_2d_newtoff.h ../lmptype.h ../nstencil.h
Binary files src/Obj_mpi/dihedral_hybrid.o and new_src/Obj_mpi/dihedral_hybrid.o differ
Binary files src/Obj_mpi/dihedral.o and new_src/Obj_mpi/dihedral.o differ
Binary files src/Obj_mpi/dihedral_zero.o and new_src/Obj_mpi/dihedral_zero.o differ
Binary files src/Obj_mpi/displace_atoms.o and new_src/Obj_mpi/displace_atoms.o differ
Binary files src/Obj_mpi/domain.o and new_src/Obj_mpi/domain.o differ
Binary files src/Obj_mpi/dump_atom.o and new_src/Obj_mpi/dump_atom.o differ
Binary files src/Obj_mpi/dump_cfg.o and new_src/Obj_mpi/dump_cfg.o differ
Binary files src/Obj_mpi/dump_custom.o and new_src/Obj_mpi/dump_custom.o differ
Binary files src/Obj_mpi/dump_dcd.o and new_src/Obj_mpi/dump_dcd.o differ
Binary files src/Obj_mpi/dump_image.o and new_src/Obj_mpi/dump_image.o differ
Binary files src/Obj_mpi/dump_local.o and new_src/Obj_mpi/dump_local.o differ
Binary files src/Obj_mpi/dump_movie.o and new_src/Obj_mpi/dump_movie.o differ
Binary files src/Obj_mpi/dump.o and new_src/Obj_mpi/dump.o differ
Binary files src/Obj_mpi/dump_xyz.o and new_src/Obj_mpi/dump_xyz.o differ
Binary files src/Obj_mpi/error.o and new_src/Obj_mpi/error.o differ
Binary files src/Obj_mpi/fastdep.exe and new_src/Obj_mpi/fastdep.exe differ
Binary files src/Obj_mpi/finish.o and new_src/Obj_mpi/finish.o differ
Binary files src/Obj_mpi/fix_adapt.o and new_src/Obj_mpi/fix_adapt.o differ
Binary files src/Obj_mpi/fix_addforce.o and new_src/Obj_mpi/fix_addforce.o differ
Binary files src/Obj_mpi/fix_ave_atom.o and new_src/Obj_mpi/fix_ave_atom.o differ
Binary files src/Obj_mpi/fix_ave_chunk.o and new_src/Obj_mpi/fix_ave_chunk.o differ
Binary files src/Obj_mpi/fix_ave_correlate.o and new_src/Obj_mpi/fix_ave_correlate.o differ
Binary files src/Obj_mpi/fix_aveforce.o and new_src/Obj_mpi/fix_aveforce.o differ
Binary files src/Obj_mpi/fix_ave_histo.o and new_src/Obj_mpi/fix_ave_histo.o differ
Binary files src/Obj_mpi/fix_ave_histo_weight.o and new_src/Obj_mpi/fix_ave_histo_weight.o differ
Binary files src/Obj_mpi/fix_ave_time.o and new_src/Obj_mpi/fix_ave_time.o differ
Binary files src/Obj_mpi/fix_balance.o and new_src/Obj_mpi/fix_balance.o differ
Binary files src/Obj_mpi/fix_box_relax.o and new_src/Obj_mpi/fix_box_relax.o differ
Binary files src/Obj_mpi/fix_controller.o and new_src/Obj_mpi/fix_controller.o differ
Binary files src/Obj_mpi/fix_deform.o and new_src/Obj_mpi/fix_deform.o differ
Binary files src/Obj_mpi/fix_deprecated.o and new_src/Obj_mpi/fix_deprecated.o differ
Binary files src/Obj_mpi/fix_drag.o and new_src/Obj_mpi/fix_drag.o differ
Binary files src/Obj_mpi/fix_dt_reset.o and new_src/Obj_mpi/fix_dt_reset.o differ
Binary files src/Obj_mpi/fix_enforce2d.o and new_src/Obj_mpi/fix_enforce2d.o differ
Binary files src/Obj_mpi/fix_external.o and new_src/Obj_mpi/fix_external.o differ
Binary files src/Obj_mpi/fix_gravity.o and new_src/Obj_mpi/fix_gravity.o differ
Binary files src/Obj_mpi/fix_group.o and new_src/Obj_mpi/fix_group.o differ
Binary files src/Obj_mpi/fix_halt.o and new_src/Obj_mpi/fix_halt.o differ
Binary files src/Obj_mpi/fix_heat.o and new_src/Obj_mpi/fix_heat.o differ
Binary files src/Obj_mpi/fix_hp.o and new_src/Obj_mpi/fix_hp.o differ
Binary files src/Obj_mpi/fix_indent.o and new_src/Obj_mpi/fix_indent.o differ
Binary files src/Obj_mpi/fix_langevin.o and new_src/Obj_mpi/fix_langevin.o differ
Binary files src/Obj_mpi/fix_lineforce.o and new_src/Obj_mpi/fix_lineforce.o differ
Binary files src/Obj_mpi/fix_minimize.o and new_src/Obj_mpi/fix_minimize.o differ
Binary files src/Obj_mpi/fix_momentum.o and new_src/Obj_mpi/fix_momentum.o differ
Binary files src/Obj_mpi/fix_move.o and new_src/Obj_mpi/fix_move.o differ
Binary files src/Obj_mpi/fix_neigh_history.o and new_src/Obj_mpi/fix_neigh_history.o differ
Binary files src/Obj_mpi/fix_nh.o and new_src/Obj_mpi/fix_nh.o differ
Binary files src/Obj_mpi/fix_nh_sphere.o and new_src/Obj_mpi/fix_nh_sphere.o differ
Binary files src/Obj_mpi/fix_nph.o and new_src/Obj_mpi/fix_nph.o differ
Binary files src/Obj_mpi/fix_nph_sphere.o and new_src/Obj_mpi/fix_nph_sphere.o differ
Binary files src/Obj_mpi/fix_npt.o and new_src/Obj_mpi/fix_npt.o differ
Binary files src/Obj_mpi/fix_npt_sphere.o and new_src/Obj_mpi/fix_npt_sphere.o differ
Binary files src/Obj_mpi/fix_nve_limit.o and new_src/Obj_mpi/fix_nve_limit.o differ
Binary files src/Obj_mpi/fix_nve_noforce.o and new_src/Obj_mpi/fix_nve_noforce.o differ
Binary files src/Obj_mpi/fix_nve.o and new_src/Obj_mpi/fix_nve.o differ
Binary files src/Obj_mpi/fix_nve_sphere.o and new_src/Obj_mpi/fix_nve_sphere.o differ
Binary files src/Obj_mpi/fix_nvt.o and new_src/Obj_mpi/fix_nvt.o differ
Binary files src/Obj_mpi/fix_nvt_sllod.o and new_src/Obj_mpi/fix_nvt_sllod.o differ
Binary files src/Obj_mpi/fix_nvt_sphere.o and new_src/Obj_mpi/fix_nvt_sphere.o differ
Binary files src/Obj_mpi/fix.o and new_src/Obj_mpi/fix.o differ
Binary files src/Obj_mpi/fix_planeforce.o and new_src/Obj_mpi/fix_planeforce.o differ
Binary files src/Obj_mpi/fix_press_berendsen.o and new_src/Obj_mpi/fix_press_berendsen.o differ
Binary files src/Obj_mpi/fix_print.o and new_src/Obj_mpi/fix_print.o differ
Binary files src/Obj_mpi/fix_property_atom.o and new_src/Obj_mpi/fix_property_atom.o differ
Binary files src/Obj_mpi/fix_qeq_comb.o and new_src/Obj_mpi/fix_qeq_comb.o differ
Binary files src/Obj_mpi/fix_read_restart.o and new_src/Obj_mpi/fix_read_restart.o differ
Binary files src/Obj_mpi/fix_recenter.o and new_src/Obj_mpi/fix_recenter.o differ
Binary files src/Obj_mpi/fix_respa.o and new_src/Obj_mpi/fix_respa.o differ
Binary files src/Obj_mpi/fix_restrain.o and new_src/Obj_mpi/fix_restrain.o differ
Binary files src/Obj_mpi/fix_setforce.o and new_src/Obj_mpi/fix_setforce.o differ
Binary files src/Obj_mpi/fix_spring_chunk.o and new_src/Obj_mpi/fix_spring_chunk.o differ
Binary files src/Obj_mpi/fix_spring.o and new_src/Obj_mpi/fix_spring.o differ
Binary files src/Obj_mpi/fix_spring_rg.o and new_src/Obj_mpi/fix_spring_rg.o differ
Binary files src/Obj_mpi/fix_spring_self.o and new_src/Obj_mpi/fix_spring_self.o differ
Binary files src/Obj_mpi/fix_store_force.o and new_src/Obj_mpi/fix_store_force.o differ
Binary files src/Obj_mpi/fix_store.o and new_src/Obj_mpi/fix_store.o differ
Binary files src/Obj_mpi/fix_store_state.o and new_src/Obj_mpi/fix_store_state.o differ
Binary files src/Obj_mpi/fix_temp_berendsen.o and new_src/Obj_mpi/fix_temp_berendsen.o differ
Binary files src/Obj_mpi/fix_temp_csld.o and new_src/Obj_mpi/fix_temp_csld.o differ
Binary files src/Obj_mpi/fix_temp_csvr.o and new_src/Obj_mpi/fix_temp_csvr.o differ
Binary files src/Obj_mpi/fix_temp_rescale.o and new_src/Obj_mpi/fix_temp_rescale.o differ
Binary files src/Obj_mpi/fix_tmd.o and new_src/Obj_mpi/fix_tmd.o differ
Binary files src/Obj_mpi/fix_vector.o and new_src/Obj_mpi/fix_vector.o differ
Binary files src/Obj_mpi/fix_viscous.o and new_src/Obj_mpi/fix_viscous.o differ
Binary files src/Obj_mpi/fix_wall_harmonic.o and new_src/Obj_mpi/fix_wall_harmonic.o differ
Binary files src/Obj_mpi/fix_wall_lj1043.o and new_src/Obj_mpi/fix_wall_lj1043.o differ
Binary files src/Obj_mpi/fix_wall_lj126.o and new_src/Obj_mpi/fix_wall_lj126.o differ
Binary files src/Obj_mpi/fix_wall_lj93.o and new_src/Obj_mpi/fix_wall_lj93.o differ
Binary files src/Obj_mpi/fix_wall.o and new_src/Obj_mpi/fix_wall.o differ
Binary files src/Obj_mpi/fix_wall_reflect.o and new_src/Obj_mpi/fix_wall_reflect.o differ
Binary files src/Obj_mpi/fix_wall_region.o and new_src/Obj_mpi/fix_wall_region.o differ
Binary files src/Obj_mpi/force.o and new_src/Obj_mpi/force.o differ
Binary files src/Obj_mpi/group.o and new_src/Obj_mpi/group.o differ
Binary files src/Obj_mpi/image.o and new_src/Obj_mpi/image.o differ
Binary files src/Obj_mpi/imbalance_group.o and new_src/Obj_mpi/imbalance_group.o differ
Binary files src/Obj_mpi/imbalance_neigh.o and new_src/Obj_mpi/imbalance_neigh.o differ
Binary files src/Obj_mpi/imbalance.o and new_src/Obj_mpi/imbalance.o differ
Binary files src/Obj_mpi/imbalance_store.o and new_src/Obj_mpi/imbalance_store.o differ
Binary files src/Obj_mpi/imbalance_time.o and new_src/Obj_mpi/imbalance_time.o differ
Binary files src/Obj_mpi/imbalance_var.o and new_src/Obj_mpi/imbalance_var.o differ
Binary files src/Obj_mpi/improper_hybrid.o and new_src/Obj_mpi/improper_hybrid.o differ
Binary files src/Obj_mpi/improper.o and new_src/Obj_mpi/improper.o differ
Binary files src/Obj_mpi/improper_zero.o and new_src/Obj_mpi/improper_zero.o differ
Binary files src/Obj_mpi/info.o and new_src/Obj_mpi/info.o differ
Binary files src/Obj_mpi/input.o and new_src/Obj_mpi/input.o differ
Binary files src/Obj_mpi/integrate.o and new_src/Obj_mpi/integrate.o differ
Binary files src/Obj_mpi/irregular.o and new_src/Obj_mpi/irregular.o differ
Binary files src/Obj_mpi/kspace.o and new_src/Obj_mpi/kspace.o differ
Binary files src/Obj_mpi/lammps.o and new_src/Obj_mpi/lammps.o differ
Binary files src/Obj_mpi/lattice.o and new_src/Obj_mpi/lattice.o differ
Binary files src/Obj_mpi/library.o and new_src/Obj_mpi/library.o differ
Binary files src/Obj_mpi/main.o and new_src/Obj_mpi/main.o differ
diff -ruN src/Obj_mpi/Makefile new_src/Obj_mpi/Makefile
--- src/Obj_mpi/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ new_src/Obj_mpi/Makefile	2018-11-15 18:43:06.324068489 +0100
@@ -0,0 +1,114 @@
+# mpi = MPI with its default compiler
+
+SHELL = /bin/sh
+
+# ---------------------------------------------------------------------
+# compiler/linker settings
+# specify flags and libraries needed for your compiler
+
+CC =		mpicxx
+CCFLAGS =	-g -O3 
+SHFLAGS =	-fPIC
+DEPFLAGS =	-M
+
+LINK =		mpicxx
+LINKFLAGS =	-g -O
+LIB = 
+SIZE =		size
+
+ARCHIVE =	ar
+ARFLAGS =	-rc
+SHLIBFLAGS =	-shared
+
+# ---------------------------------------------------------------------
+# LAMMPS-specific settings, all OPTIONAL
+# specify settings for LAMMPS features you will use
+# if you change any -D setting, do full re-compile after "make clean"
+
+# LAMMPS ifdef settings
+# see possible settings in Section 2.2 (step 4) of manual
+
+LMP_INC =	-DLAMMPS_GZIP -DLAMMPS_MEMALIGN=64
+
+# MPI library
+# see discussion in Section 2.2 (step 5) of manual
+# MPI wrapper compiler/linker can provide this info
+# can point to dummy MPI library in src/STUBS as in Makefile.serial
+# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
+# INC = path for mpi.h, MPI compiler settings
+# PATH = path for MPI library
+# LIB = name of MPI library
+
+MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1
+MPI_PATH = 
+MPI_LIB =	
+
+# FFT library
+# see discussion in Section 2.2 (step 6) of manual
+# can be left blank to use provided KISS FFT library
+# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
+# PATH = path for FFT library
+# LIB = name of FFT library
+
+FFT_INC =    	
+FFT_PATH = 
+FFT_LIB =	
+
+# JPEG and/or PNG library
+# see discussion in Section 2.2 (step 7) of manual
+# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
+# INC = path(s) for jpeglib.h and/or png.h
+# PATH = path(s) for JPEG library and/or PNG library
+# LIB = name(s) of JPEG library and/or PNG library
+
+JPG_INC =       
+JPG_PATH = 	
+JPG_LIB =	
+
+# ---------------------------------------------------------------------
+# build rules and dependencies
+# do not edit this section
+
+include	Makefile.package.settings
+include	Makefile.package
+
+EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
+EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
+EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)
+EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
+EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)
+
+# Path to src files
+
+vpath %.cpp ..
+vpath %.h ..
+
+# Link target
+
+$(EXE):	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
+	$(SIZE) $(EXE)
+
+# Library targets
+
+lib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)
+
+shlib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
+	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
+        $(OBJ) $(EXTRA_LIB) $(LIB)
+
+# Compilation rules
+
+%.o:%.cpp
+	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<
+
+# Individual dependencies
+
+depend : fastdep.exe $(SRC)
+	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1
+
+fastdep.exe: ../DEPEND/fastdep.c
+	cc -O -o $@ $<
+
+sinclude .depend
diff -ruN src/Obj_mpi/Makefile.package new_src/Obj_mpi/Makefile.package
--- src/Obj_mpi/Makefile.package	1970-01-01 01:00:00.000000000 +0100
+++ new_src/Obj_mpi/Makefile.package	2018-11-15 18:43:06.336068490 +0100
@@ -0,0 +1,12 @@
+# Settings for libraries used by specific LAMMPS packages
+# this file is auto-edited when those packages are included/excluded
+
+PKG_INC =   
+PKG_PATH =  
+PKG_LIB =   
+PKG_CPP_DEPENDS = 
+PKG_LINK_DEPENDS = 
+
+PKG_SYSINC =  
+PKG_SYSLIB =  
+PKG_SYSPATH = 
diff -ruN src/Obj_mpi/Makefile.package.settings new_src/Obj_mpi/Makefile.package.settings
--- src/Obj_mpi/Makefile.package.settings	1970-01-01 01:00:00.000000000 +0100
+++ new_src/Obj_mpi/Makefile.package.settings	2018-11-15 18:43:06.336068490 +0100
@@ -0,0 +1,4 @@
+# Makefile settings generated by libraries used by specific LAMMPS packages
+# this file is auto-edited when those packages are included/excluded
+
+
Binary files src/Obj_mpi/math_extra.o and new_src/Obj_mpi/math_extra.o differ
Binary files src/Obj_mpi/math_special.o and new_src/Obj_mpi/math_special.o differ
Binary files src/Obj_mpi/memory.o and new_src/Obj_mpi/memory.o differ
Binary files src/Obj_mpi/min_cg.o and new_src/Obj_mpi/min_cg.o differ
Binary files src/Obj_mpi/min_fire.o and new_src/Obj_mpi/min_fire.o differ
Binary files src/Obj_mpi/min_hftn.o and new_src/Obj_mpi/min_hftn.o differ
Binary files src/Obj_mpi/minimize.o and new_src/Obj_mpi/minimize.o differ
Binary files src/Obj_mpi/min_linesearch.o and new_src/Obj_mpi/min_linesearch.o differ
Binary files src/Obj_mpi/min.o and new_src/Obj_mpi/min.o differ
Binary files src/Obj_mpi/min_quickmin.o and new_src/Obj_mpi/min_quickmin.o differ
Binary files src/Obj_mpi/min_sd.o and new_src/Obj_mpi/min_sd.o differ
Binary files src/Obj_mpi/modify.o and new_src/Obj_mpi/modify.o differ
Binary files src/Obj_mpi/molecule.o and new_src/Obj_mpi/molecule.o differ
Binary files src/Obj_mpi/nbin.o and new_src/Obj_mpi/nbin.o differ
Binary files src/Obj_mpi/nbin_standard.o and new_src/Obj_mpi/nbin_standard.o differ
Binary files src/Obj_mpi/neighbor.o and new_src/Obj_mpi/neighbor.o differ
Binary files src/Obj_mpi/neigh_list.o and new_src/Obj_mpi/neigh_list.o differ
Binary files src/Obj_mpi/neigh_request.o and new_src/Obj_mpi/neigh_request.o differ
Binary files src/Obj_mpi/npair_copy.o and new_src/Obj_mpi/npair_copy.o differ
Binary files src/Obj_mpi/npair_full_bin_atomonly.o and new_src/Obj_mpi/npair_full_bin_atomonly.o differ
Binary files src/Obj_mpi/npair_full_bin_ghost.o and new_src/Obj_mpi/npair_full_bin_ghost.o differ
Binary files src/Obj_mpi/npair_full_bin.o and new_src/Obj_mpi/npair_full_bin.o differ
Binary files src/Obj_mpi/npair_full_multi.o and new_src/Obj_mpi/npair_full_multi.o differ
Binary files src/Obj_mpi/npair_full_nsq_ghost.o and new_src/Obj_mpi/npair_full_nsq_ghost.o differ
Binary files src/Obj_mpi/npair_full_nsq.o and new_src/Obj_mpi/npair_full_nsq.o differ
Binary files src/Obj_mpi/npair_half_bin_atomonly_newton.o and new_src/Obj_mpi/npair_half_bin_atomonly_newton.o differ
Binary files src/Obj_mpi/npair_half_bin_newtoff_ghost.o and new_src/Obj_mpi/npair_half_bin_newtoff_ghost.o differ
Binary files src/Obj_mpi/npair_half_bin_newtoff.o and new_src/Obj_mpi/npair_half_bin_newtoff.o differ
Binary files src/Obj_mpi/npair_half_bin_newton.o and new_src/Obj_mpi/npair_half_bin_newton.o differ
Binary files src/Obj_mpi/npair_half_bin_newton_tri.o and new_src/Obj_mpi/npair_half_bin_newton_tri.o differ
Binary files src/Obj_mpi/npair_halffull_newtoff.o and new_src/Obj_mpi/npair_halffull_newtoff.o differ
Binary files src/Obj_mpi/npair_halffull_newton.o and new_src/Obj_mpi/npair_halffull_newton.o differ
Binary files src/Obj_mpi/npair_half_multi_newtoff.o and new_src/Obj_mpi/npair_half_multi_newtoff.o differ
Binary files src/Obj_mpi/npair_half_multi_newton.o and new_src/Obj_mpi/npair_half_multi_newton.o differ
Binary files src/Obj_mpi/npair_half_multi_newton_tri.o and new_src/Obj_mpi/npair_half_multi_newton_tri.o differ
Binary files src/Obj_mpi/npair_half_nsq_newtoff_ghost.o and new_src/Obj_mpi/npair_half_nsq_newtoff_ghost.o differ
Binary files src/Obj_mpi/npair_half_nsq_newtoff.o and new_src/Obj_mpi/npair_half_nsq_newtoff.o differ
Binary files src/Obj_mpi/npair_half_nsq_newton.o and new_src/Obj_mpi/npair_half_nsq_newton.o differ
Binary files src/Obj_mpi/npair_half_respa_bin_newtoff.o and new_src/Obj_mpi/npair_half_respa_bin_newtoff.o differ
Binary files src/Obj_mpi/npair_half_respa_bin_newton.o and new_src/Obj_mpi/npair_half_respa_bin_newton.o differ
Binary files src/Obj_mpi/npair_half_respa_bin_newton_tri.o and new_src/Obj_mpi/npair_half_respa_bin_newton_tri.o differ
Binary files src/Obj_mpi/npair_half_respa_nsq_newtoff.o and new_src/Obj_mpi/npair_half_respa_nsq_newtoff.o differ
Binary files src/Obj_mpi/npair_half_respa_nsq_newton.o and new_src/Obj_mpi/npair_half_respa_nsq_newton.o differ
Binary files src/Obj_mpi/npair_half_size_bin_newtoff.o and new_src/Obj_mpi/npair_half_size_bin_newtoff.o differ
Binary files src/Obj_mpi/npair_half_size_bin_newton.o and new_src/Obj_mpi/npair_half_size_bin_newton.o differ
Binary files src/Obj_mpi/npair_half_size_bin_newton_tri.o and new_src/Obj_mpi/npair_half_size_bin_newton_tri.o differ
Binary files src/Obj_mpi/npair_half_size_nsq_newtoff.o and new_src/Obj_mpi/npair_half_size_nsq_newtoff.o differ
Binary files src/Obj_mpi/npair_half_size_nsq_newton.o and new_src/Obj_mpi/npair_half_size_nsq_newton.o differ
Binary files src/Obj_mpi/npair.o and new_src/Obj_mpi/npair.o differ
Binary files src/Obj_mpi/npair_skip.o and new_src/Obj_mpi/npair_skip.o differ
Binary files src/Obj_mpi/npair_skip_respa.o and new_src/Obj_mpi/npair_skip_respa.o differ
Binary files src/Obj_mpi/npair_skip_size.o and new_src/Obj_mpi/npair_skip_size.o differ
Binary files src/Obj_mpi/npair_skip_size_off2on.o and new_src/Obj_mpi/npair_skip_size_off2on.o differ
Binary files src/Obj_mpi/npair_skip_size_off2on_oneside.o and new_src/Obj_mpi/npair_skip_size_off2on_oneside.o differ
Binary files src/Obj_mpi/nstencil_full_bin_2d.o and new_src/Obj_mpi/nstencil_full_bin_2d.o differ
Binary files src/Obj_mpi/nstencil_full_bin_3d.o and new_src/Obj_mpi/nstencil_full_bin_3d.o differ
Binary files src/Obj_mpi/nstencil_full_ghost_bin_2d.o and new_src/Obj_mpi/nstencil_full_ghost_bin_2d.o differ
Binary files src/Obj_mpi/nstencil_full_ghost_bin_3d.o and new_src/Obj_mpi/nstencil_full_ghost_bin_3d.o differ
Binary files src/Obj_mpi/nstencil_full_multi_2d.o and new_src/Obj_mpi/nstencil_full_multi_2d.o differ
Binary files src/Obj_mpi/nstencil_full_multi_3d.o and new_src/Obj_mpi/nstencil_full_multi_3d.o differ
Binary files src/Obj_mpi/nstencil_half_bin_2d_newtoff.o and new_src/Obj_mpi/nstencil_half_bin_2d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_bin_2d_newton.o and new_src/Obj_mpi/nstencil_half_bin_2d_newton.o differ
Binary files src/Obj_mpi/nstencil_half_bin_2d_newton_tri.o and new_src/Obj_mpi/nstencil_half_bin_2d_newton_tri.o differ
Binary files src/Obj_mpi/nstencil_half_bin_3d_newtoff.o and new_src/Obj_mpi/nstencil_half_bin_3d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_bin_3d_newton.o and new_src/Obj_mpi/nstencil_half_bin_3d_newton.o differ
Binary files src/Obj_mpi/nstencil_half_bin_3d_newton_tri.o and new_src/Obj_mpi/nstencil_half_bin_3d_newton_tri.o differ
Binary files src/Obj_mpi/nstencil_half_ghost_bin_2d_newtoff.o and new_src/Obj_mpi/nstencil_half_ghost_bin_2d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_ghost_bin_3d_newtoff.o and new_src/Obj_mpi/nstencil_half_ghost_bin_3d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_multi_2d_newtoff.o and new_src/Obj_mpi/nstencil_half_multi_2d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_multi_2d_newton.o and new_src/Obj_mpi/nstencil_half_multi_2d_newton.o differ
Binary files src/Obj_mpi/nstencil_half_multi_2d_newton_tri.o and new_src/Obj_mpi/nstencil_half_multi_2d_newton_tri.o differ
Binary files src/Obj_mpi/nstencil_half_multi_3d_newtoff.o and new_src/Obj_mpi/nstencil_half_multi_3d_newtoff.o differ
Binary files src/Obj_mpi/nstencil_half_multi_3d_newton.o and new_src/Obj_mpi/nstencil_half_multi_3d_newton.o differ
Binary files src/Obj_mpi/nstencil_half_multi_3d_newton_tri.o and new_src/Obj_mpi/nstencil_half_multi_3d_newton_tri.o differ
Binary files src/Obj_mpi/nstencil.o and new_src/Obj_mpi/nstencil.o differ
Binary files src/Obj_mpi/ntopo_angle_all.o and new_src/Obj_mpi/ntopo_angle_all.o differ
Binary files src/Obj_mpi/ntopo_angle_partial.o and new_src/Obj_mpi/ntopo_angle_partial.o differ
Binary files src/Obj_mpi/ntopo_angle_template.o and new_src/Obj_mpi/ntopo_angle_template.o differ
Binary files src/Obj_mpi/ntopo_bond_all.o and new_src/Obj_mpi/ntopo_bond_all.o differ
Binary files src/Obj_mpi/ntopo_bond_partial.o and new_src/Obj_mpi/ntopo_bond_partial.o differ
Binary files src/Obj_mpi/ntopo_bond_template.o and new_src/Obj_mpi/ntopo_bond_template.o differ
Binary files src/Obj_mpi/ntopo_dihedral_all.o and new_src/Obj_mpi/ntopo_dihedral_all.o differ
Binary files src/Obj_mpi/ntopo_dihedral_partial.o and new_src/Obj_mpi/ntopo_dihedral_partial.o differ
Binary files src/Obj_mpi/ntopo_dihedral_template.o and new_src/Obj_mpi/ntopo_dihedral_template.o differ
Binary files src/Obj_mpi/ntopo_improper_all.o and new_src/Obj_mpi/ntopo_improper_all.o differ
Binary files src/Obj_mpi/ntopo_improper_partial.o and new_src/Obj_mpi/ntopo_improper_partial.o differ
Binary files src/Obj_mpi/ntopo_improper_template.o and new_src/Obj_mpi/ntopo_improper_template.o differ
Binary files src/Obj_mpi/ntopo.o and new_src/Obj_mpi/ntopo.o differ
Binary files src/Obj_mpi/output.o and new_src/Obj_mpi/output.o differ
Binary files src/Obj_mpi/pair_adp.o and new_src/Obj_mpi/pair_adp.o differ
Binary files src/Obj_mpi/pair_airebo_morse.o and new_src/Obj_mpi/pair_airebo_morse.o differ
Binary files src/Obj_mpi/pair_airebo.o and new_src/Obj_mpi/pair_airebo.o differ
Binary files src/Obj_mpi/pair_beck.o and new_src/Obj_mpi/pair_beck.o differ
Binary files src/Obj_mpi/pair_bop.o and new_src/Obj_mpi/pair_bop.o differ
Binary files src/Obj_mpi/pair_born_coul_dsf.o and new_src/Obj_mpi/pair_born_coul_dsf.o differ
Binary files src/Obj_mpi/pair_born_coul_wolf.o and new_src/Obj_mpi/pair_born_coul_wolf.o differ
Binary files src/Obj_mpi/pair_born.o and new_src/Obj_mpi/pair_born.o differ
Binary files src/Obj_mpi/pair_buck_coul_cut.o and new_src/Obj_mpi/pair_buck_coul_cut.o differ
Binary files src/Obj_mpi/pair_buck.o and new_src/Obj_mpi/pair_buck.o differ
Binary files src/Obj_mpi/pair_comb3.o and new_src/Obj_mpi/pair_comb3.o differ
Binary files src/Obj_mpi/pair_comb.o and new_src/Obj_mpi/pair_comb.o differ
Binary files src/Obj_mpi/pair_coul_cut.o and new_src/Obj_mpi/pair_coul_cut.o differ
Binary files src/Obj_mpi/pair_coul_debye.o and new_src/Obj_mpi/pair_coul_debye.o differ
Binary files src/Obj_mpi/pair_coul_dsf.o and new_src/Obj_mpi/pair_coul_dsf.o differ
Binary files src/Obj_mpi/pair_coul_streitz.o and new_src/Obj_mpi/pair_coul_streitz.o differ
Binary files src/Obj_mpi/pair_coul_wolf.o and new_src/Obj_mpi/pair_coul_wolf.o differ
Binary files src/Obj_mpi/pair_dpd.o and new_src/Obj_mpi/pair_dpd.o differ
Binary files src/Obj_mpi/pair_dpd_tstat.o and new_src/Obj_mpi/pair_dpd_tstat.o differ
Binary files src/Obj_mpi/pair_eam_alloy.o and new_src/Obj_mpi/pair_eam_alloy.o differ
Binary files src/Obj_mpi/pair_eam_cd.o and new_src/Obj_mpi/pair_eam_cd.o differ
Binary files src/Obj_mpi/pair_eam_fs.o and new_src/Obj_mpi/pair_eam_fs.o differ
Binary files src/Obj_mpi/pair_eam.o and new_src/Obj_mpi/pair_eam.o differ
Binary files src/Obj_mpi/pair_eim.o and new_src/Obj_mpi/pair_eim.o differ
Binary files src/Obj_mpi/pair_gauss.o and new_src/Obj_mpi/pair_gauss.o differ
Binary files src/Obj_mpi/pair_gw.o and new_src/Obj_mpi/pair_gw.o differ
Binary files src/Obj_mpi/pair_gw_zbl.o and new_src/Obj_mpi/pair_gw_zbl.o differ
Binary files src/Obj_mpi/pair_hybrid.o and new_src/Obj_mpi/pair_hybrid.o differ
Binary files src/Obj_mpi/pair_hybrid_overlay.o and new_src/Obj_mpi/pair_hybrid_overlay.o differ
Binary files src/Obj_mpi/pair_lcbop.o and new_src/Obj_mpi/pair_lcbop.o differ
Binary files src/Obj_mpi/pair_lj96_cut.o and new_src/Obj_mpi/pair_lj96_cut.o differ
Binary files src/Obj_mpi/pair_lj_cubic.o and new_src/Obj_mpi/pair_lj_cubic.o differ
Binary files src/Obj_mpi/pair_lj_cut_coul_cut.o and new_src/Obj_mpi/pair_lj_cut_coul_cut.o differ
Binary files src/Obj_mpi/pair_lj_cut_coul_debye.o and new_src/Obj_mpi/pair_lj_cut_coul_debye.o differ
Binary files src/Obj_mpi/pair_lj_cut_coul_dsf.o and new_src/Obj_mpi/pair_lj_cut_coul_dsf.o differ
Binary files src/Obj_mpi/pair_lj_cut_coul_wolf.o and new_src/Obj_mpi/pair_lj_cut_coul_wolf.o differ
Binary files src/Obj_mpi/pair_lj_cut.o and new_src/Obj_mpi/pair_lj_cut.o differ
Binary files src/Obj_mpi/pair_lj_expand.o and new_src/Obj_mpi/pair_lj_expand.o differ
Binary files src/Obj_mpi/pair_lj_gromacs_coul_gromacs.o and new_src/Obj_mpi/pair_lj_gromacs_coul_gromacs.o differ
Binary files src/Obj_mpi/pair_lj_gromacs.o and new_src/Obj_mpi/pair_lj_gromacs.o differ
Binary files src/Obj_mpi/pair_lj_smooth_linear.o and new_src/Obj_mpi/pair_lj_smooth_linear.o differ
Binary files src/Obj_mpi/pair_lj_smooth.o and new_src/Obj_mpi/pair_lj_smooth.o differ
Binary files src/Obj_mpi/pair_mie_cut.o and new_src/Obj_mpi/pair_mie_cut.o differ
Binary files src/Obj_mpi/pair_morse.o and new_src/Obj_mpi/pair_morse.o differ
Binary files src/Obj_mpi/pair_nb3b_harmonic.o and new_src/Obj_mpi/pair_nb3b_harmonic.o differ
Binary files src/Obj_mpi/pair.o and new_src/Obj_mpi/pair.o differ
Binary files src/Obj_mpi/pair_polymorphic.o and new_src/Obj_mpi/pair_polymorphic.o differ
Binary files src/Obj_mpi/pair_rebo.o and new_src/Obj_mpi/pair_rebo.o differ
Binary files src/Obj_mpi/pair_soft.o and new_src/Obj_mpi/pair_soft.o differ
Binary files src/Obj_mpi/pair_sw.o and new_src/Obj_mpi/pair_sw.o differ
Binary files src/Obj_mpi/pair_table.o and new_src/Obj_mpi/pair_table.o differ
Binary files src/Obj_mpi/pair_tersoff_mod_c.o and new_src/Obj_mpi/pair_tersoff_mod_c.o differ
Binary files src/Obj_mpi/pair_tersoff_mod.o and new_src/Obj_mpi/pair_tersoff_mod.o differ
Binary files src/Obj_mpi/pair_tersoff.o and new_src/Obj_mpi/pair_tersoff.o differ
Binary files src/Obj_mpi/pair_tersoff_zbl.o and new_src/Obj_mpi/pair_tersoff_zbl.o differ
Binary files src/Obj_mpi/pair_ufm.o and new_src/Obj_mpi/pair_ufm.o differ
Binary files src/Obj_mpi/pair_vashishta.o and new_src/Obj_mpi/pair_vashishta.o differ
Binary files src/Obj_mpi/pair_vashishta_table.o and new_src/Obj_mpi/pair_vashishta_table.o differ
Binary files src/Obj_mpi/pair_yukawa.o and new_src/Obj_mpi/pair_yukawa.o differ
Binary files src/Obj_mpi/pair_zbl.o and new_src/Obj_mpi/pair_zbl.o differ
Binary files src/Obj_mpi/pair_zero.o and new_src/Obj_mpi/pair_zero.o differ
Binary files src/Obj_mpi/procmap.o and new_src/Obj_mpi/procmap.o differ
Binary files src/Obj_mpi/python.o and new_src/Obj_mpi/python.o differ
Binary files src/Obj_mpi/random_mars.o and new_src/Obj_mpi/random_mars.o differ
Binary files src/Obj_mpi/random_park.o and new_src/Obj_mpi/random_park.o differ
Binary files src/Obj_mpi/rcb.o and new_src/Obj_mpi/rcb.o differ
Binary files src/Obj_mpi/read_data.o and new_src/Obj_mpi/read_data.o differ
Binary files src/Obj_mpi/read_dump.o and new_src/Obj_mpi/read_dump.o differ
Binary files src/Obj_mpi/reader_native.o and new_src/Obj_mpi/reader_native.o differ
Binary files src/Obj_mpi/reader.o and new_src/Obj_mpi/reader.o differ
Binary files src/Obj_mpi/reader_xyz.o and new_src/Obj_mpi/reader_xyz.o differ
Binary files src/Obj_mpi/read_restart.o and new_src/Obj_mpi/read_restart.o differ
Binary files src/Obj_mpi/region_block.o and new_src/Obj_mpi/region_block.o differ
Binary files src/Obj_mpi/region_cone.o and new_src/Obj_mpi/region_cone.o differ
Binary files src/Obj_mpi/region_cylinder.o and new_src/Obj_mpi/region_cylinder.o differ
Binary files src/Obj_mpi/region_intersect.o and new_src/Obj_mpi/region_intersect.o differ
Binary files src/Obj_mpi/region.o and new_src/Obj_mpi/region.o differ
Binary files src/Obj_mpi/region_plane.o and new_src/Obj_mpi/region_plane.o differ
Binary files src/Obj_mpi/region_prism.o and new_src/Obj_mpi/region_prism.o differ
Binary files src/Obj_mpi/region_sphere.o and new_src/Obj_mpi/region_sphere.o differ
Binary files src/Obj_mpi/region_union.o and new_src/Obj_mpi/region_union.o differ
Binary files src/Obj_mpi/replicate.o and new_src/Obj_mpi/replicate.o differ
Binary files src/Obj_mpi/rerun.o and new_src/Obj_mpi/rerun.o differ
Binary files src/Obj_mpi/reset_ids.o and new_src/Obj_mpi/reset_ids.o differ
Binary files src/Obj_mpi/respa.o and new_src/Obj_mpi/respa.o differ
Binary files src/Obj_mpi/run.o and new_src/Obj_mpi/run.o differ
Binary files src/Obj_mpi/set.o and new_src/Obj_mpi/set.o differ
Binary files src/Obj_mpi/special.o and new_src/Obj_mpi/special.o differ
Binary files src/Obj_mpi/thermo.o and new_src/Obj_mpi/thermo.o differ
Binary files src/Obj_mpi/timer.o and new_src/Obj_mpi/timer.o differ
Binary files src/Obj_mpi/universe.o and new_src/Obj_mpi/universe.o differ
Binary files src/Obj_mpi/update.o and new_src/Obj_mpi/update.o differ
Binary files src/Obj_mpi/variable.o and new_src/Obj_mpi/variable.o differ
Binary files src/Obj_mpi/velocity.o and new_src/Obj_mpi/velocity.o differ
Binary files src/Obj_mpi/verlet.o and new_src/Obj_mpi/verlet.o differ
Binary files src/Obj_mpi/write_coeff.o and new_src/Obj_mpi/write_coeff.o differ
Binary files src/Obj_mpi/write_data.o and new_src/Obj_mpi/write_data.o differ
Binary files src/Obj_mpi/write_dump.o and new_src/Obj_mpi/write_dump.o differ
Binary files src/Obj_mpi/write_restart.o and new_src/Obj_mpi/write_restart.o differ
diff -ruN src/set.cpp new_src/set.cpp
--- src/set.cpp	2018-11-13 15:33:50.914075581 +0100
+++ new_src/set.cpp	2018-11-15 17:08:19.077599108 +0100
@@ -45,7 +45,7 @@
 
 enum{TYPE,TYPE_FRACTION,MOLECULE,X,Y,Z,CHARGE,MASS,SHAPE,LENGTH,TRI,
      DIPOLE,DIPOLE_RANDOM,SPIN,SPIN_RANDOM,QUAT,QUAT_RANDOM,
-     THETA,THETA_RANDOM,ANGMOM,OMEGA,
+     THETA,THETA_RANDOM,ANGMOM,OMEGA,PAFIPATH,
      DIAMETER,DENSITY,VOLUME,IMAGE,BOND,ANGLE,DIHEDRAL,IMPROPER,
      MESO_E,MESO_CV,MESO_RHO,EDPD_TEMP,EDPD_CV,CC,SMD_MASS_DENSITY,
      SMD_CONTACT_RADIUS,DPDTHETA,INAME,DNAME,VX,VY,VZ};
@@ -252,6 +252,33 @@
       set(SPIN);
       iarg += 5;
 
+    } else if (strcmp(arg[iarg],"pafipath") == 0) {
+      if (iarg+9 > narg) error->all(FLERR,"Illegal set command");
+      vec1 = NULL;
+      memory->create(vec1,9,"set:vec1");
+      if (strstr(arg[iarg+1],"v_") == arg[iarg+1]) varparse(arg[iarg+1],1);
+      else vec1[0] = force->numeric(FLERR,arg[iarg+1]);
+      if (strstr(arg[iarg+2],"v_") == arg[iarg+2]) varparse(arg[iarg+2],2);
+      else vec1[1] = force->numeric(FLERR,arg[iarg+2]);
+      if (strstr(arg[iarg+3],"v_") == arg[iarg+3]) varparse(arg[iarg+3],3);
+      else vec1[2] = force->numeric(FLERR,arg[iarg+3]);
+      if (strstr(arg[iarg+4],"v_") == arg[iarg+4]) varparse(arg[iarg+4],4);
+      else vec1[3] = force->numeric(FLERR,arg[iarg+4]);
+      if (strstr(arg[iarg+5],"v_") == arg[iarg+5]) varparse(arg[iarg+5],5);
+      else vec1[4] = force->numeric(FLERR,arg[iarg+5]);
+      if (strstr(arg[iarg+6],"v_") == arg[iarg+6]) varparse(arg[iarg+6],6);
+      else vec1[5] = force->numeric(FLERR,arg[iarg+6]);
+      if (strstr(arg[iarg+7],"v_") == arg[iarg+7]) varparse(arg[iarg+7],7);
+      else vec1[6] = force->numeric(FLERR,arg[iarg+7]);
+      if (strstr(arg[iarg+8],"v_") == arg[iarg+8]) varparse(arg[iarg+8],8);
+      else vec1[7] = force->numeric(FLERR,arg[iarg+8]);
+      if (strstr(arg[iarg+9],"v_") == arg[iarg+9]) varparse(arg[iarg+9],9);
+      else vec1[8] = force->numeric(FLERR,arg[iarg+9]);
+      if (!atom->pafi_flag)
+        error->all(FLERR,"Cannot set this attribute for this atom style");
+      set(PAFIPATH);
+      iarg += 10;
+
     } else if (strcmp(arg[iarg],"spin/random") == 0) {
       if (iarg+3 > narg) error->all(FLERR,"Illegal set command");
       ivalue = force->inumeric(FLERR,arg[iarg+1]);
@@ -885,6 +912,25 @@
       sp[i][3] = dvalue;
     }
 
+    // set 0th,1st,2nd path derivative for USER-PAFI
+
+    else if (keyword == PAFIPATH) {
+
+      double **path = atom->path;
+      path[i][0] = vec1[0];
+      path[i][1] = vec1[1];
+      path[i][2] = vec1[2];
+      double **norm = atom->norm;
+      norm[i][0] = vec1[3];
+      norm[i][4] = vec1[4];
+      norm[i][5] = vec1[5];
+      double **dnorm = atom->dnorm;
+      dnorm[i][0] = vec1[6];
+      dnorm[i][1] = vec1[7];
+      dnorm[i][2] = vec1[8];
+    }
+
+
     // set quaternion orientation of ellipsoid or tri or body particle
     // set quaternion orientation of ellipsoid or tri or body particle
     // enforce quat rotation vector in z dir for 2d systems
diff -ruN src/style_angle.h new_src/style_angle.h
--- src/style_angle.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_angle.h	2018-11-15 17:10:29.361605321 +0100
@@ -0,0 +1,2 @@
+#include "angle_hybrid.h"
+#include "angle_zero.h"
diff -ruN src/style_atom.h new_src/style_atom.h
--- src/style_atom.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_atom.h	2018-11-15 17:10:29.373605321 +0100
@@ -0,0 +1,9 @@
+#include "atom_vec_atomic.h"
+#include "atom_vec_body.h"
+#include "atom_vec_charge.h"
+#include "atom_vec_ellipsoid.h"
+#include "atom_vec_hybrid.h"
+#include "atom_vec_line.h"
+#include "atom_vec_pafi.h"
+#include "atom_vec_sphere.h"
+#include "atom_vec_tri.h"
diff -ruN src/style_bond.h new_src/style_bond.h
--- src/style_bond.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_bond.h	2018-11-15 17:10:29.393605322 +0100
@@ -0,0 +1,2 @@
+#include "bond_hybrid.h"
+#include "bond_zero.h"
diff -ruN src/style_command.h new_src/style_command.h
--- src/style_command.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_command.h	2018-11-15 17:10:29.409605323 +0100
@@ -0,0 +1,23 @@
+#include "balance.h"
+#include "change_box.h"
+#include "create_atoms.h"
+#include "create_bonds.h"
+#include "create_box.h"
+#include "delete_atoms.h"
+#include "delete_bonds.h"
+#include "displace_atoms.h"
+#include "info.h"
+#include "minimize.h"
+#include "read_data.h"
+#include "read_dump.h"
+#include "read_restart.h"
+#include "replicate.h"
+#include "rerun.h"
+#include "reset_ids.h"
+#include "run.h"
+#include "set.h"
+#include "velocity.h"
+#include "write_coeff.h"
+#include "write_data.h"
+#include "write_dump.h"
+#include "write_restart.h"
diff -ruN src/style_compute.h new_src/style_compute.h
--- src/style_compute.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_compute.h	2018-11-15 17:10:29.421605323 +0100
@@ -0,0 +1,61 @@
+#include "compute_aggregate_atom.h"
+#include "compute_angle.h"
+#include "compute_angle_local.h"
+#include "compute_angmom_chunk.h"
+#include "compute_bond.h"
+#include "compute_bond_local.h"
+#include "compute_centro_atom.h"
+#include "compute_chunk_atom.h"
+#include "compute_cluster_atom.h"
+#include "compute_cna_atom.h"
+#include "compute_com.h"
+#include "compute_com_chunk.h"
+#include "compute_contact_atom.h"
+#include "compute_coord_atom.h"
+#include "compute_dihedral.h"
+#include "compute_dihedral_local.h"
+#include "compute_dipole_chunk.h"
+#include "compute_displace_atom.h"
+#include "compute_erotate_sphere.h"
+#include "compute_erotate_sphere_atom.h"
+#include "compute_fragment_atom.h"
+#include "compute_global_atom.h"
+#include "compute_group_group.h"
+#include "compute_gyration.h"
+#include "compute_gyration_chunk.h"
+#include "compute_heat_flux.h"
+#include "compute_hexorder_atom.h"
+#include "compute_improper.h"
+#include "compute_improper_local.h"
+#include "compute_inertia_chunk.h"
+#include "compute_ke.h"
+#include "compute_ke_atom.h"
+#include "compute_msd.h"
+#include "compute_msd_chunk.h"
+#include "compute_omega_chunk.h"
+#include "compute_orientorder_atom.h"
+#include "compute_pair.h"
+#include "compute_pair_local.h"
+#include "compute_pe.h"
+#include "compute_pe_atom.h"
+#include "compute_pressure.h"
+#include "compute_property_atom.h"
+#include "compute_property_chunk.h"
+#include "compute_property_local.h"
+#include "compute_rdf.h"
+#include "compute_reduce.h"
+#include "compute_reduce_region.h"
+#include "compute_slice.h"
+#include "compute_stress_atom.h"
+#include "compute_temp.h"
+#include "compute_temp_chunk.h"
+#include "compute_temp_com.h"
+#include "compute_temp_deform.h"
+#include "compute_temp_partial.h"
+#include "compute_temp_profile.h"
+#include "compute_temp_ramp.h"
+#include "compute_temp_region.h"
+#include "compute_temp_sphere.h"
+#include "compute_torque_chunk.h"
+#include "compute_vacf.h"
+#include "compute_vcm_chunk.h"
diff -ruN src/style_dihedral.h new_src/style_dihedral.h
--- src/style_dihedral.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_dihedral.h	2018-11-15 17:10:29.429605324 +0100
@@ -0,0 +1,2 @@
+#include "dihedral_hybrid.h"
+#include "dihedral_zero.h"
diff -ruN src/style_dump.h new_src/style_dump.h
--- src/style_dump.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_dump.h	2018-11-15 17:10:29.441605324 +0100
@@ -0,0 +1,8 @@
+#include "dump_atom.h"
+#include "dump_cfg.h"
+#include "dump_custom.h"
+#include "dump_dcd.h"
+#include "dump_image.h"
+#include "dump_local.h"
+#include "dump_movie.h"
+#include "dump_xyz.h"
diff -ruN src/style_fix.h new_src/style_fix.h
--- src/style_fix.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_fix.h	2018-11-15 17:10:29.453605325 +0100
@@ -0,0 +1,71 @@
+#include "fix_adapt.h"
+#include "fix_addforce.h"
+#include "fix_ave_atom.h"
+#include "fix_ave_chunk.h"
+#include "fix_ave_correlate.h"
+#include "fix_ave_histo.h"
+#include "fix_ave_histo_weight.h"
+#include "fix_ave_time.h"
+#include "fix_aveforce.h"
+#include "fix_balance.h"
+#include "fix_box_relax.h"
+#include "fix_controller.h"
+#include "fix_deform.h"
+#include "fix_deprecated.h"
+#include "fix_drag.h"
+#include "fix_dt_reset.h"
+#include "fix_enforce2d.h"
+#include "fix_external.h"
+#include "fix_gravity.h"
+#include "fix_group.h"
+#include "fix_halt.h"
+#include "fix_heat.h"
+#include "fix_hp.h"
+#include "fix_indent.h"
+#include "fix_langevin.h"
+#include "fix_lineforce.h"
+#include "fix_minimize.h"
+#include "fix_momentum.h"
+#include "fix_move.h"
+#include "fix_neigh_history.h"
+#include "fix_nph.h"
+#include "fix_nph_sphere.h"
+#include "fix_npt.h"
+#include "fix_npt_sphere.h"
+#include "fix_nve.h"
+#include "fix_nve_limit.h"
+#include "fix_nve_noforce.h"
+#include "fix_nve_sphere.h"
+#include "fix_nvt.h"
+#include "fix_nvt_sllod.h"
+#include "fix_nvt_sphere.h"
+#include "fix_planeforce.h"
+#include "fix_press_berendsen.h"
+#include "fix_print.h"
+#include "fix_property_atom.h"
+#include "fix_qeq_comb.h"
+#include "fix_read_restart.h"
+#include "fix_recenter.h"
+#include "fix_respa.h"
+#include "fix_restrain.h"
+#include "fix_setforce.h"
+#include "fix_spring.h"
+#include "fix_spring_chunk.h"
+#include "fix_spring_rg.h"
+#include "fix_spring_self.h"
+#include "fix_store.h"
+#include "fix_store_force.h"
+#include "fix_store_state.h"
+#include "fix_temp_berendsen.h"
+#include "fix_temp_csld.h"
+#include "fix_temp_csvr.h"
+#include "fix_temp_rescale.h"
+#include "fix_tmd.h"
+#include "fix_vector.h"
+#include "fix_viscous.h"
+#include "fix_wall_harmonic.h"
+#include "fix_wall_lj1043.h"
+#include "fix_wall_lj126.h"
+#include "fix_wall_lj93.h"
+#include "fix_wall_reflect.h"
+#include "fix_wall_region.h"
diff -ruN src/style_improper.h new_src/style_improper.h
--- src/style_improper.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_improper.h	2018-11-15 17:10:29.461605325 +0100
@@ -0,0 +1,2 @@
+#include "improper_hybrid.h"
+#include "improper_zero.h"
diff -ruN src/style_integrate.h new_src/style_integrate.h
--- src/style_integrate.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_integrate.h	2018-11-15 17:10:29.473605326 +0100
@@ -0,0 +1,2 @@
+#include "respa.h"
+#include "verlet.h"
diff -ruN src/style_minimize.h new_src/style_minimize.h
--- src/style_minimize.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_minimize.h	2018-11-15 17:10:29.485605327 +0100
@@ -0,0 +1,5 @@
+#include "min_cg.h"
+#include "min_fire.h"
+#include "min_hftn.h"
+#include "min_quickmin.h"
+#include "min_sd.h"
diff -ruN src/style_nbin.h new_src/style_nbin.h
--- src/style_nbin.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_nbin.h	2018-11-15 17:10:29.489605327 +0100
@@ -0,0 +1 @@
+#include "nbin_standard.h"
diff -ruN src/style_npair.h new_src/style_npair.h
--- src/style_npair.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_npair.h	2018-11-15 17:10:29.493605327 +0100
@@ -0,0 +1,35 @@
+#include "npair_copy.h"
+#include "npair_full_bin.h"
+#include "npair_full_bin_atomonly.h"
+#include "npair_full_bin_ghost.h"
+#include "npair_full_multi.h"
+#include "npair_full_nsq.h"
+#include "npair_full_nsq_ghost.h"
+#include "npair_half_bin_atomonly_newton.h"
+#include "npair_half_bin_newtoff.h"
+#include "npair_half_bin_newtoff_ghost.h"
+#include "npair_half_bin_newton.h"
+#include "npair_half_bin_newton_tri.h"
+#include "npair_half_multi_newtoff.h"
+#include "npair_half_multi_newton.h"
+#include "npair_half_multi_newton_tri.h"
+#include "npair_half_nsq_newtoff.h"
+#include "npair_half_nsq_newtoff_ghost.h"
+#include "npair_half_nsq_newton.h"
+#include "npair_half_respa_bin_newtoff.h"
+#include "npair_half_respa_bin_newton.h"
+#include "npair_half_respa_bin_newton_tri.h"
+#include "npair_half_respa_nsq_newtoff.h"
+#include "npair_half_respa_nsq_newton.h"
+#include "npair_half_size_bin_newtoff.h"
+#include "npair_half_size_bin_newton.h"
+#include "npair_half_size_bin_newton_tri.h"
+#include "npair_half_size_nsq_newtoff.h"
+#include "npair_half_size_nsq_newton.h"
+#include "npair_halffull_newtoff.h"
+#include "npair_halffull_newton.h"
+#include "npair_skip.h"
+#include "npair_skip_respa.h"
+#include "npair_skip_size.h"
+#include "npair_skip_size_off2on.h"
+#include "npair_skip_size_off2on_oneside.h"
diff -ruN src/style_nstencil.h new_src/style_nstencil.h
--- src/style_nstencil.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_nstencil.h	2018-11-15 17:10:29.497605327 +0100
@@ -0,0 +1,20 @@
+#include "nstencil_full_bin_2d.h"
+#include "nstencil_full_bin_3d.h"
+#include "nstencil_full_ghost_bin_2d.h"
+#include "nstencil_full_ghost_bin_3d.h"
+#include "nstencil_full_multi_2d.h"
+#include "nstencil_full_multi_3d.h"
+#include "nstencil_half_bin_2d_newtoff.h"
+#include "nstencil_half_bin_2d_newton.h"
+#include "nstencil_half_bin_2d_newton_tri.h"
+#include "nstencil_half_bin_3d_newtoff.h"
+#include "nstencil_half_bin_3d_newton.h"
+#include "nstencil_half_bin_3d_newton_tri.h"
+#include "nstencil_half_ghost_bin_2d_newtoff.h"
+#include "nstencil_half_ghost_bin_3d_newtoff.h"
+#include "nstencil_half_multi_2d_newtoff.h"
+#include "nstencil_half_multi_2d_newton.h"
+#include "nstencil_half_multi_2d_newton_tri.h"
+#include "nstencil_half_multi_3d_newtoff.h"
+#include "nstencil_half_multi_3d_newton.h"
+#include "nstencil_half_multi_3d_newton_tri.h"
diff -ruN src/style_ntopo.h new_src/style_ntopo.h
--- src/style_ntopo.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_ntopo.h	2018-11-15 17:10:29.505605328 +0100
@@ -0,0 +1,12 @@
+#include "ntopo_angle_all.h"
+#include "ntopo_angle_partial.h"
+#include "ntopo_angle_template.h"
+#include "ntopo_bond_all.h"
+#include "ntopo_bond_partial.h"
+#include "ntopo_bond_template.h"
+#include "ntopo_dihedral_all.h"
+#include "ntopo_dihedral_partial.h"
+#include "ntopo_dihedral_template.h"
+#include "ntopo_improper_all.h"
+#include "ntopo_improper_partial.h"
+#include "ntopo_improper_template.h"
diff -ruN src/style_pair.h new_src/style_pair.h
--- src/style_pair.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_pair.h	2018-11-15 17:10:29.509605328 +0100
@@ -0,0 +1,60 @@
+#include "pair_adp.h"
+#include "pair_airebo.h"
+#include "pair_airebo_morse.h"
+#include "pair_beck.h"
+#include "pair_bop.h"
+#include "pair_born.h"
+#include "pair_born_coul_dsf.h"
+#include "pair_born_coul_wolf.h"
+#include "pair_buck.h"
+#include "pair_buck_coul_cut.h"
+#include "pair_comb.h"
+#include "pair_comb3.h"
+#include "pair_coul_cut.h"
+#include "pair_coul_debye.h"
+#include "pair_coul_dsf.h"
+#include "pair_coul_streitz.h"
+#include "pair_coul_wolf.h"
+#include "pair_dpd.h"
+#include "pair_dpd_tstat.h"
+#include "pair_eam.h"
+#include "pair_eam_alloy.h"
+#include "pair_eam_cd.h"
+#include "pair_eam_fs.h"
+#include "pair_eim.h"
+#include "pair_gauss.h"
+#include "pair_gw.h"
+#include "pair_gw_zbl.h"
+#include "pair_hybrid.h"
+#include "pair_hybrid_overlay.h"
+#include "pair_lcbop.h"
+#include "pair_lj96_cut.h"
+#include "pair_lj_cubic.h"
+#include "pair_lj_cut.h"
+#include "pair_lj_cut_coul_cut.h"
+#include "pair_lj_cut_coul_debye.h"
+#include "pair_lj_cut_coul_dsf.h"
+#include "pair_lj_cut_coul_wolf.h"
+#include "pair_lj_expand.h"
+#include "pair_lj_gromacs.h"
+#include "pair_lj_gromacs_coul_gromacs.h"
+#include "pair_lj_smooth.h"
+#include "pair_lj_smooth_linear.h"
+#include "pair_mie_cut.h"
+#include "pair_morse.h"
+#include "pair_nb3b_harmonic.h"
+#include "pair_polymorphic.h"
+#include "pair_rebo.h"
+#include "pair_soft.h"
+#include "pair_sw.h"
+#include "pair_table.h"
+#include "pair_tersoff.h"
+#include "pair_tersoff_mod.h"
+#include "pair_tersoff_mod_c.h"
+#include "pair_tersoff_zbl.h"
+#include "pair_ufm.h"
+#include "pair_vashishta.h"
+#include "pair_vashishta_table.h"
+#include "pair_yukawa.h"
+#include "pair_zbl.h"
+#include "pair_zero.h"
diff -ruN src/style_reader.h new_src/style_reader.h
--- src/style_reader.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_reader.h	2018-11-15 17:10:29.513605328 +0100
@@ -0,0 +1,2 @@
+#include "reader_native.h"
+#include "reader_xyz.h"
diff -ruN src/style_region.h new_src/style_region.h
--- src/style_region.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/style_region.h	2018-11-15 17:10:29.521605328 +0100
@@ -0,0 +1,8 @@
+#include "region_block.h"
+#include "region_cone.h"
+#include "region_cylinder.h"
+#include "region_intersect.h"
+#include "region_plane.h"
+#include "region_prism.h"
+#include "region_sphere.h"
+#include "region_union.h"
diff -ruN src/USER-PAFI/atom_vec_pafi.cpp new_src/USER-PAFI/atom_vec_pafi.cpp
--- src/USER-PAFI/atom_vec_pafi.cpp	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/atom_vec_pafi.cpp	2018-11-16 10:47:07.384045726 +0100
@@ -0,0 +1,952 @@
+/* ----------------------------------------------------------------------
+
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+
+------------------------------------------------------------------------- */
+
+/* ------------------------------------------------------------------------
+   Contributing authors: Thomas Swinburne (CNRS & CINaM, Marseille, France)
+
+   Please cite the related publication:
+   T.D. Swinburne and M.-C. Marinica, Unsupervised calculation of free energy barriers in large crystalline systems, Physical Review Letters 2018
+------------------------------------------------------------------------- */
+#include <iostream>
+#include <cmath>
+#include <cstdlib>
+#include <cstring>
+#include "atom.h"
+#include "atom_vec_pafi.h"
+#include "comm.h"
+#include "domain.h"
+#include "error.h"
+#include "fix.h"
+#include "memory.h"
+#include "modify.h"
+
+using namespace LAMMPS_NS;
+
+/* ---------------------------------------------------------------------- */
+
+AtomVecPAFI::AtomVecPAFI(LAMMPS *lmp) : AtomVec(lmp)
+{
+  molecular = 0;
+  mass_type = 1;
+  comm_x_only = 1;
+  comm_f_only = 1;
+  size_forward = 3;
+  size_reverse = 3;
+  size_border = 15;
+  size_velocity = 3;
+  size_data_atom = 5;//14;
+  size_data_vel = 4;
+  xcol_data = 3;
+  atom->pafi_flag = 1;
+}
+
+
+/* ----------------------------------------------------------------------
+   grow atom arrays
+   n = 0 grows arrays by a chunk
+   n > 0 allocates arrays to size n
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::grow(int n)
+{
+  if (n == 0) grow_nmax();
+  else nmax = n;
+  atom->nmax = nmax;
+  if (nmax < 0 || nmax > MAXSMALLINT)
+    error->one(FLERR,"Per-processor system is too big");
+
+  tag = memory->grow(atom->tag,nmax,"atom:tag");
+  type = memory->grow(atom->type,nmax,"atom:type");
+  mask = memory->grow(atom->mask,nmax,"atom:mask");
+  image = memory->grow(atom->image,nmax,"atom:image");
+
+  // allocating mech. quantities
+
+  x = memory->grow(atom->x,nmax,3,"atom:x");
+  v = memory->grow(atom->v,nmax,3,"atom:v");
+  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
+
+  // allocating path quantities
+  path = memory->grow(atom->path,nmax,3,"atom:path");
+  norm = memory->grow(atom->norm,nmax,3,"atom:norm");
+  dnorm = memory->grow(atom->dnorm,nmax,3,"atom:dnorm");
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);
+}
+
+/* ----------------------------------------------------------------------
+   reset local array ptrs
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::grow_reset()
+{
+  tag = atom->tag; type = atom->type;
+  mask = atom->mask; image = atom->image;
+  x = atom->x; v = atom->v; f = atom->f;
+  path = atom->path; norm = atom->norm; dnorm = atom->dnorm;
+}
+
+
+/* ----------------------------------------------------------------------
+   copy atom I info to atom J
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::copy(int i, int j, int delflag)
+{
+  tag[j] = tag[i];
+  type[j] = type[i];
+  mask[j] = mask[i];
+  image[j] = image[i];
+  x[j][0] = x[i][0];
+  x[j][1] = x[i][1];
+  x[j][2] = x[i][2];
+
+  v[j][0] = v[i][0];
+  v[j][1] = v[i][1];
+  v[j][2] = v[i][2];
+
+  path[j][0] = path[i][0];
+  path[j][1] = path[i][1];
+  path[j][2] = path[i][2];
+
+  norm[j][0] = norm[i][0];
+  norm[j][1] = norm[i][1];
+  norm[j][2] = norm[i][2];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_comm(int n, int *list, double *buf,
+                             int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;
+      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;
+      dz = pbc[2]*domain->zprd;
+    }
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0] + dx;
+      buf[m++] = x[j][1] + dy;
+      buf[m++] = x[j][2] + dz;
+    }
+  }
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_comm_vel(int n, int *list, double *buf,
+                                 int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz,dvx,dvy,dvz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = v[j][0];
+      buf[m++] = v[j][1];
+      buf[m++] = v[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;
+      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;
+      dz = pbc[2]*domain->zprd;
+    }
+    if (!deform_vremap) {
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = v[j][0];
+        buf[m++] = v[j][1];
+        buf[m++] = v[j][2];
+      }
+    } else {
+      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];
+      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];
+      dvz = pbc[2]*h_rate[2];
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        if (mask[i] & deform_groupbit) {
+          buf[m++] = v[j][0] + dvx;
+          buf[m++] = v[j][1] + dvy;
+          buf[m++] = v[j][2] + dvz;
+        } else {
+          buf[m++] = v[j][0];
+          buf[m++] = v[j][1];
+          buf[m++] = v[j][2];
+        }
+      }
+    }
+  }
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFI::unpack_comm(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFI::unpack_comm_vel(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    v[i][0] = buf[m++];
+    v[i][1] = buf[m++];
+    v[i][2] = buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_reverse(int n, int first, double *buf)
+{
+  int i,m,last;
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    buf[m++] = f[i][0];
+    buf[m++] = f[i][1];
+    buf[m++] = f[i][2];
+  }
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFI::unpack_reverse(int n, int *list, double *buf)
+{
+  int i,j,m;
+  m = 0;
+  for (i = 0; i < n; i++) {
+    j = list[i];
+    f[j][0] += buf[m++];
+    f[j][1] += buf[m++];
+    f[j][2] += buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_border(int n, int *list, double *buf,
+                               int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0];
+      dy = pbc[1];
+      dz = pbc[2];
+    }
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0] + dx;
+      buf[m++] = x[j][1] + dy;
+      buf[m++] = x[j][2] + dz;
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+    }
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_border_vel(int n, int *list, double *buf,
+                                   int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz,dvx,dvy,dvz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+      buf[m++] = v[j][0];
+      buf[m++] = v[j][1];
+      buf[m++] = v[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0];
+      dy = pbc[1];
+      dz = pbc[2];
+    }
+    if (!deform_vremap) {
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = ubuf(tag[j]).d;
+        buf[m++] = ubuf(type[j]).d;
+        buf[m++] = ubuf(mask[j]).d;
+        buf[m++] = path[j][0];
+        buf[m++] = path[j][1];
+        buf[m++] = path[j][2];
+        buf[m++] = norm[j][0];
+        buf[m++] = norm[j][1];
+        buf[m++] = norm[j][2];
+        buf[m++] = dnorm[j][0];
+        buf[m++] = dnorm[j][1];
+        buf[m++] = dnorm[j][2];
+        buf[m++] = v[j][0];
+        buf[m++] = v[j][1];
+        buf[m++] = v[j][2];
+      }
+    } else {
+      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];
+      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];
+      dvz = pbc[2]*h_rate[2];
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = ubuf(tag[j]).d;
+        buf[m++] = ubuf(type[j]).d;
+        buf[m++] = ubuf(mask[j]).d;
+        buf[m++] = path[j][0];
+        buf[m++] = path[j][1];
+        buf[m++] = path[j][2];
+        buf[m++] = norm[j][0];
+        buf[m++] = norm[j][1];
+        buf[m++] = norm[j][2];
+        buf[m++] = dnorm[j][0];
+        buf[m++] = dnorm[j][1];
+        buf[m++] = dnorm[j][2];
+        if (mask[i] & deform_groupbit) {
+          buf[m++] = v[j][0] + dvx;
+          buf[m++] = v[j][1] + dvy;
+          buf[m++] = v[j][2] + dvz;
+        } else {
+          buf[m++] = v[j][0];
+          buf[m++] = v[j][1];
+          buf[m++] = v[j][2];
+        }
+      }
+    }
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_border_hybrid(int n, int *list, double *buf)
+{
+  int i,j,m;
+
+  m = 0;
+  for (i = 0; i < n; i++) {
+    j = list[i];
+    buf[m++] = path[j][0];
+    buf[m++] = path[j][1];
+    buf[m++] = path[j][2];
+    buf[m++] = norm[j][0];
+    buf[m++] = norm[j][1];
+    buf[m++] = norm[j][2];
+    buf[m++] = dnorm[j][0];
+    buf[m++] = dnorm[j][1];
+    buf[m++] = dnorm[j][2];
+  }
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFI::unpack_border(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    if (i == nmax) grow(0);
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    tag[i] = (tagint) ubuf(buf[m++]).i;
+    type[i] = (int) ubuf(buf[m++]).i;
+    mask[i] = (int) ubuf(buf[m++]).i;
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->
+        unpack_border(n,first,&buf[m]);
+
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFI::unpack_border_vel(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    if (i == nmax) grow(0);
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    tag[i] = (tagint) ubuf(buf[m++]).i;
+    type[i] = (int) ubuf(buf[m++]).i;
+    mask[i] = (int) ubuf(buf[m++]).i;
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+    v[i][0] = buf[m++];
+    v[i][1] = buf[m++];
+    v[i][2] = buf[m++];
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->
+        unpack_border(n,first,&buf[m]);
+
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::unpack_border_hybrid(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+  }
+
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   pack all atom quantities for shipping to another proc
+   xyz must be 1st 3 values, so that comm::exchange can test on them
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_exchange(int i, double *buf)
+{
+  int m = 1;
+  buf[m++] = x[i][0];
+  buf[m++] = x[i][1];
+  buf[m++] = x[i][2];
+  buf[m++] = v[i][0];
+  buf[m++] = v[i][1];
+  buf[m++] = v[i][2];
+  buf[m++] = ubuf(tag[i]).d;
+  buf[m++] = ubuf(type[i]).d;
+  buf[m++] = ubuf(mask[i]).d;
+  buf[m++] = ubuf(image[i]).d;
+
+  buf[m++] = path[i][0];
+  buf[m++] = path[i][1];
+  buf[m++] = path[i][2];
+  buf[m++] = norm[i][0];
+  buf[m++] = norm[i][1];
+  buf[m++] = norm[i][2];
+  buf[m++] = dnorm[i][0];
+  buf[m++] = dnorm[i][1];
+  buf[m++] = dnorm[i][2];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);
+
+  buf[0] = m;
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFI::unpack_exchange(double *buf)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  int m = 1;
+  x[nlocal][0] = buf[m++];
+  x[nlocal][1] = buf[m++];
+  x[nlocal][2] = buf[m++];
+  v[nlocal][0] = buf[m++];
+  v[nlocal][1] = buf[m++];
+  v[nlocal][2] = buf[m++];
+  tag[nlocal] = (tagint) ubuf(buf[m++]).i;
+  type[nlocal] = (int) ubuf(buf[m++]).i;
+  mask[nlocal] = (int) ubuf(buf[m++]).i;
+  image[nlocal] = (imageint) ubuf(buf[m++]).i;
+
+  path[nlocal][0] = buf[m++];
+  path[nlocal][1] = buf[m++];
+  path[nlocal][2] = buf[m++];
+  norm[nlocal][0] = buf[m++];
+  norm[nlocal][1] = buf[m++];
+  norm[nlocal][2] = buf[m++];
+  dnorm[nlocal][0] = buf[m++];
+  dnorm[nlocal][1] = buf[m++];
+  dnorm[nlocal][2] = buf[m++];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      m += modify->fix[atom->extra_grow[iextra]]->
+        unpack_exchange(nlocal,&buf[m]);
+
+  atom->nlocal++;
+
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   size of restart data for all atoms owned by this proc
+   include extra data stored by fixes
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::size_restart()
+{
+  int i;
+
+  int nlocal = atom->nlocal;
+  int n = 20 * nlocal;
+
+  if (atom->nextra_restart)
+    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)
+      for (i = 0; i < nlocal; i++)
+        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);
+
+  return n;
+}
+
+/* ----------------------------------------------------------------------
+   pack atom I's data for restart file including extra quantities
+   xyz must be 1st 3 values, so that read_restart can test on them
+   molecular types may be negative, but write as positive
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_restart(int i, double *buf)
+{
+  int m = 1;
+
+  buf[m++] = x[i][0];
+  buf[m++] = x[i][1];
+  buf[m++] = x[i][2];
+  buf[m++] = ubuf(tag[i]).d;
+  buf[m++] = ubuf(type[i]).d;
+  buf[m++] = ubuf(mask[i]).d;
+  buf[m++] = ubuf(image[i]).d;
+  buf[m++] = v[i][0];
+  buf[m++] = v[i][1];
+  buf[m++] = v[i][2];
+
+  buf[m++] = path[i][0];
+  buf[m++] = path[i][1];
+  buf[m++] = path[i][2];
+  buf[m++] = norm[i][0];
+  buf[m++] = norm[i][1];
+  buf[m++] = norm[i][2];
+  buf[m++] = dnorm[i][0];
+  buf[m++] = dnorm[i][1];
+  buf[m++] = dnorm[i][2];
+
+  if (atom->nextra_restart)
+    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)
+      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);
+
+  buf[0] = m;
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   unpack data for one atom from restart file including extra quantities
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::unpack_restart(double *buf)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) {
+    grow(0);
+    if (atom->nextra_store)
+      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
+  }
+
+  int m = 1;
+  x[nlocal][0] = buf[m++];
+  x[nlocal][1] = buf[m++];
+  x[nlocal][2] = buf[m++];
+  tag[nlocal] = (tagint) ubuf(buf[m++]).i;
+  type[nlocal] = (int) ubuf(buf[m++]).i;
+  mask[nlocal] = (int) ubuf(buf[m++]).i;
+  image[nlocal] = (imageint) ubuf(buf[m++]).i;
+  v[nlocal][0] = buf[m++];
+  v[nlocal][1] = buf[m++];
+  v[nlocal][2] = buf[m++];
+
+  path[nlocal][0] = buf[m++];
+  path[nlocal][1] = buf[m++];
+  path[nlocal][2] = buf[m++];
+  norm[nlocal][0] = buf[m++];
+  norm[nlocal][1] = buf[m++];
+  norm[nlocal][2] = buf[m++];
+  dnorm[nlocal][0] = buf[m++];
+  dnorm[nlocal][1] = buf[m++];
+  dnorm[nlocal][2] = buf[m++];
+
+  double **extra = atom->extra;
+  if (atom->nextra_store) {
+    int size = static_cast<int> (buf[0]) - m;
+    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];
+  }
+
+  atom->nlocal++;
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   create one atom of itype at coord
+   set other values to defaults
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::create_atom(int itype, double *coord)
+{
+
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  tag[nlocal] = 0;
+  type[nlocal] = itype;
+  x[nlocal][0] = coord[0];
+  x[nlocal][1] = coord[1];
+  x[nlocal][2] = coord[2];
+  mask[nlocal] = 1;
+  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |
+    ((imageint) IMGMAX << IMGBITS) | IMGMAX;
+  v[nlocal][0] = 0.0;
+  v[nlocal][1] = 0.0;
+  v[nlocal][2] = 0.0;
+
+  path[nlocal][0] = 0.0;
+  path[nlocal][1] = 0.0;
+  path[nlocal][2] = 0.0;
+  norm[nlocal][0] = 0.0;
+  norm[nlocal][1] = 0.0;
+  norm[nlocal][2] = 0.0;
+  dnorm[nlocal][0] = 0.0;
+  dnorm[nlocal][1] = 0.0;
+  dnorm[nlocal][2] = 0.0;
+
+  atom->nlocal++;
+}
+
+/* ----------------------------------------------------------------------
+   unpack one line from Atoms section of data file
+   initialize other atom quantities
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::data_atom(double *coord, imageint imagetmp, char **values)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  tag[nlocal] = ATOTAGINT(values[0]);
+  type[nlocal] = atoi(values[1]);
+  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)
+    error->one(FLERR,"Invalid atom type in Atoms section of data file");
+
+  x[nlocal][0] = coord[0];
+  x[nlocal][1] = coord[1];
+  x[nlocal][2] = coord[2];
+
+  path[nlocal][0] = 0.;
+  path[nlocal][1] = 0.;
+  path[nlocal][2] = 0.;
+
+  norm[nlocal][0] = 0.;
+  norm[nlocal][1] = 0.;
+  norm[nlocal][2] = 0.;
+
+  dnorm[nlocal][0] = 0.;
+  dnorm[nlocal][1] = 0.;
+  dnorm[nlocal][2] = 0.;
+
+  image[nlocal] = imagetmp;
+
+  mask[nlocal] = 1;
+  v[nlocal][0] = 0.0;
+  v[nlocal][1] = 0.0;
+  v[nlocal][2] = 0.0;
+
+  atom->nlocal++;
+}
+
+/* ----------------------------------------------------------------------
+   unpack hybrid quantities from one line in Atoms section of data file
+   initialize other atom quantities for this sub-style
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::data_atom_hybrid(int nlocal, char **values)
+{
+
+  path[nlocal][0] = atof(values[0]);
+  path[nlocal][1] = atof(values[1]);
+  path[nlocal][2] = atof(values[2]);
+
+  norm[nlocal][0] = atof(values[3]);
+  norm[nlocal][1] = atof(values[4]);
+  norm[nlocal][2] = atof(values[5]);
+
+  dnorm[nlocal][0] = atof(values[6]);
+  dnorm[nlocal][1] = atof(values[7]);
+  dnorm[nlocal][2] = atof(values[8]);
+
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   pack atom info for data file including 3 image flags
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::pack_data(double **buf)
+{
+  int nlocal = atom->nlocal;
+  for (int i = 0; i < nlocal; i++) {
+    buf[i][0] = ubuf(tag[i]).d;
+    buf[i][1] = ubuf(type[i]).d;
+    buf[i][2] = x[i][0];
+    buf[i][3] = x[i][1];
+    buf[i][4] = x[i][2];
+
+    buf[i][5] = ubuf((image[i] & IMGMASK) - IMGMAX).d;
+    buf[i][6] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;
+    buf[i][7] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;
+  }
+}
+
+/* ----------------------------------------------------------------------
+   pack hybrid atom info for data file
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::pack_data_hybrid(int i, double *buf)
+{
+  buf[0] = path[i][0];
+  buf[1] = path[i][1];
+  buf[2] = path[i][2];
+
+  buf[3] = norm[i][0];
+  buf[4] = norm[i][1];
+  buf[5] = norm[i][2];
+
+  buf[6] = dnorm[i][0];
+  buf[7] = dnorm[i][1];
+  buf[8] = dnorm[i][2];
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   write atom info to data file including 3 image flags
+------------------------------------------------------------------------- */
+
+void AtomVecPAFI::write_data(FILE *fp, int n, double **buf)
+{
+  for (int i = 0; i < n; i++)
+    fprintf(fp,TAGINT_FORMAT \
+            " %d %-1.16e %-1.16e %-1.16e %d %d %d\n",
+            (tagint) ubuf(buf[i][0]).i,(int) ubuf(buf[i][1]).i,
+            buf[i][2],buf[i][3],buf[i][4],
+            (int) ubuf(buf[i][5]).i,(int) ubuf(buf[i][6]).i,
+            (int) ubuf(buf[i][7]).i);
+}
+
+/* ----------------------------------------------------------------------
+   write hybrid atom info to data file
+------------------------------------------------------------------------- */
+
+int AtomVecPAFI::write_data_hybrid(FILE *fp, double *buf)
+{
+  fprintf(fp,"%-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e",
+  buf[0],buf[1],buf[2],
+  buf[3],buf[4],buf[5],
+  buf[6],buf[7],buf[8]);
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   return # of bytes of allocated memory
+------------------------------------------------------------------------- */
+
+bigint AtomVecPAFI::memory_usage()
+{
+  bigint bytes = 0;
+
+  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
+  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
+  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
+  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
+  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
+  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
+  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
+
+  if (atom->memcheck("path")) bytes += memory->usage(path,nmax,3);
+  if (atom->memcheck("norm")) bytes += memory->usage(norm,nmax,3);
+  if (atom->memcheck("dnorm")) bytes += memory->usage(dnorm,nmax,3);
+
+  return bytes;
+}
diff -ruN src/USER-PAFI/atom_vec_pafi.h new_src/USER-PAFI/atom_vec_pafi.h
--- src/USER-PAFI/atom_vec_pafi.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/atom_vec_pafi.h	2018-11-16 10:47:07.384045726 +0100
@@ -0,0 +1,91 @@
+/* -*- c++ -*- ----------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------
+   Contributing authors: Thomas Swinburne (CNRS & CINaM, Marseille, France)
+
+   Please cite the related publication:
+   T.D. Swinburne and M.-C. Marinica, Unsupervised calculation of free energy barriers in large crystalline systems, Physical Review Letters 2018
+------------------------------------------------------------------------- */
+
+
+#ifdef ATOM_CLASS
+
+AtomStyle(pafi,AtomVecPAFI)
+
+#else
+
+#ifndef LMP_ATOM_VEC_PAFI_H
+#define LMP_ATOM_VEC_PAFI_H
+
+#include "atom_vec.h"
+
+namespace LAMMPS_NS {
+
+class AtomVecPAFI : public AtomVec {
+ public:
+  AtomVecPAFI(class LAMMPS *);
+  void grow(int);
+  void grow_reset();
+  void copy(int, int, int);
+  int pack_comm(int, int *, double *, int, int *);
+  int pack_comm_vel(int, int *, double *, int, int *);
+  void unpack_comm(int, int, double *);
+  void unpack_comm_vel(int, int, double *);
+  int pack_reverse(int, int, double *);
+  void unpack_reverse(int, int *, double *);
+  int pack_border(int, int *, double *, int, int *);
+  int pack_border_vel(int, int *, double *, int, int *);
+  int pack_border_hybrid(int, int *, double *);
+  void unpack_border(int, int, double *);
+  void unpack_border_vel(int, int, double *);
+  int unpack_border_hybrid(int, int, double *);
+  int pack_exchange(int, double *);
+  int unpack_exchange(double *);
+  int size_restart();
+  int pack_restart(int, double *);
+  int unpack_restart(double *);
+  void create_atom(int, double *);
+  virtual void data_atom(double *, imageint, char **);
+  virtual int data_atom_hybrid(int, char **);
+  virtual void pack_data(double **);
+  virtual int pack_data_hybrid(int, double *);
+  virtual void write_data(FILE *, int, double **);
+  virtual int write_data_hybrid(FILE *, double *);
+  bigint memory_usage();
+
+ private:
+  tagint *tag;
+  int *type,*mask;
+  imageint *image;
+  double **x,**v,**f;		// lattice quantities
+  // 0th, 1st and 2nd derivative of reference path w.r.t. to path coordinate r
+  double **path,**norm,**dnorm;
+};
+
+}
+
+#endif
+#endif
+
+/* ERROR/WARNING messages:
+
+E: Per-processor system is too big
+
+The number of owned atoms plus ghost atoms on a single
+processor must fit in 32-bit integer.
+
+E: Invalid atom type in Atoms section of data file
+
+Atom types must range from 1 to specified # of types.
+
+*/
diff -ruN src/USER-PAFI/atom_vec_pafipath.cpp new_src/USER-PAFI/atom_vec_pafipath.cpp
--- src/USER-PAFI/atom_vec_pafipath.cpp	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/atom_vec_pafipath.cpp	2018-11-16 10:47:07.384045726 +0100
@@ -0,0 +1,968 @@
+/* ----------------------------------------------------------------------
+
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+
+------------------------------------------------------------------------- */
+
+/* ------------------------------------------------------------------------
+   Contributing authors: Thomas Swinburne (CNRS & CINaM, Marseille, France)
+
+   Please cite the related publication:
+   T.D. Swinburne and M.-C. Marinica, Unsupervised calculation of free energy barriers in large crystalline systems, Physical Review Letters 2018
+------------------------------------------------------------------------- */
+#include <iostream>
+#include <cmath>
+#include <cstdlib>
+#include <cstring>
+#include "atom.h"
+#include "atom_vec_pafipath.h"
+#include "comm.h"
+#include "domain.h"
+#include "error.h"
+#include "fix.h"
+#include "memory.h"
+#include "modify.h"
+
+using namespace LAMMPS_NS;
+
+/* ---------------------------------------------------------------------- */
+
+AtomVecPAFIPATH::AtomVecPAFIPATH(LAMMPS *lmp) : AtomVec(lmp)
+{
+  molecular = 0;
+  mass_type = 1;
+  comm_x_only = 1;
+  comm_f_only = 1;
+  size_forward = 3;
+  size_reverse = 3;
+  size_border = 15;
+  size_velocity = 3;
+  size_data_atom = 14;
+  size_data_vel = 4;
+  xcol_data = 3;
+  atom->pafi_flag = 1;
+}
+
+
+/* ----------------------------------------------------------------------
+   grow atom arrays
+   n = 0 grows arrays by a chunk
+   n > 0 allocates arrays to size n
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::grow(int n)
+{
+  if (n == 0) grow_nmax();
+  else nmax = n;
+  atom->nmax = nmax;
+  if (nmax < 0 || nmax > MAXSMALLINT)
+    error->one(FLERR,"Per-processor system is too big");
+
+  tag = memory->grow(atom->tag,nmax,"atom:tag");
+  type = memory->grow(atom->type,nmax,"atom:type");
+  mask = memory->grow(atom->mask,nmax,"atom:mask");
+  image = memory->grow(atom->image,nmax,"atom:image");
+
+  // allocating mech. quantities
+
+  x = memory->grow(atom->x,nmax,3,"atom:x");
+  v = memory->grow(atom->v,nmax,3,"atom:v");
+  f = memory->grow(atom->f,nmax*comm->nthreads,3,"atom:f");
+
+  // allocating path quantities
+  path = memory->grow(atom->path,nmax,3,"atom:path");
+  norm = memory->grow(atom->norm,nmax,3,"atom:norm");
+  dnorm = memory->grow(atom->dnorm,nmax,3,"atom:dnorm");
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      modify->fix[atom->extra_grow[iextra]]->grow_arrays(nmax);
+}
+
+/* ----------------------------------------------------------------------
+   reset local array ptrs
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::grow_reset()
+{
+  tag = atom->tag; type = atom->type;
+  mask = atom->mask; image = atom->image;
+  x = atom->x; v = atom->v; f = atom->f;
+  path = atom->path; norm = atom->norm; dnorm = atom->dnorm;
+}
+
+
+/* ----------------------------------------------------------------------
+   copy atom I info to atom J
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::copy(int i, int j, int delflag)
+{
+  tag[j] = tag[i];
+  type[j] = type[i];
+  mask[j] = mask[i];
+  image[j] = image[i];
+  x[j][0] = x[i][0];
+  x[j][1] = x[i][1];
+  x[j][2] = x[i][2];
+
+  v[j][0] = v[i][0];
+  v[j][1] = v[i][1];
+  v[j][2] = v[i][2];
+
+  path[j][0] = path[i][0];
+  path[j][1] = path[i][1];
+  path[j][2] = path[i][2];
+
+  norm[j][0] = norm[i][0];
+  norm[j][1] = norm[i][1];
+  norm[j][2] = norm[i][2];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      modify->fix[atom->extra_grow[iextra]]->copy_arrays(i,j,delflag);
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_comm(int n, int *list, double *buf,
+                             int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;
+      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;
+      dz = pbc[2]*domain->zprd;
+    }
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0] + dx;
+      buf[m++] = x[j][1] + dy;
+      buf[m++] = x[j][2] + dz;
+    }
+  }
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_comm_vel(int n, int *list, double *buf,
+                                 int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz,dvx,dvy,dvz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = v[j][0];
+      buf[m++] = v[j][1];
+      buf[m++] = v[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0]*domain->xprd + pbc[5]*domain->xy + pbc[4]*domain->xz;
+      dy = pbc[1]*domain->yprd + pbc[3]*domain->yz;
+      dz = pbc[2]*domain->zprd;
+    }
+    if (!deform_vremap) {
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = v[j][0];
+        buf[m++] = v[j][1];
+        buf[m++] = v[j][2];
+      }
+    } else {
+      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];
+      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];
+      dvz = pbc[2]*h_rate[2];
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        if (mask[i] & deform_groupbit) {
+          buf[m++] = v[j][0] + dvx;
+          buf[m++] = v[j][1] + dvy;
+          buf[m++] = v[j][2] + dvz;
+        } else {
+          buf[m++] = v[j][0];
+          buf[m++] = v[j][1];
+          buf[m++] = v[j][2];
+        }
+      }
+    }
+  }
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::unpack_comm(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::unpack_comm_vel(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    v[i][0] = buf[m++];
+    v[i][1] = buf[m++];
+    v[i][2] = buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_reverse(int n, int first, double *buf)
+{
+  int i,m,last;
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    buf[m++] = f[i][0];
+    buf[m++] = f[i][1];
+    buf[m++] = f[i][2];
+  }
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::unpack_reverse(int n, int *list, double *buf)
+{
+  int i,j,m;
+  m = 0;
+  for (i = 0; i < n; i++) {
+    j = list[i];
+    f[j][0] += buf[m++];
+    f[j][1] += buf[m++];
+    f[j][2] += buf[m++];
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_border(int n, int *list, double *buf,
+                               int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0];
+      dy = pbc[1];
+      dz = pbc[2];
+    }
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0] + dx;
+      buf[m++] = x[j][1] + dy;
+      buf[m++] = x[j][2] + dz;
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+    }
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_border_vel(int n, int *list, double *buf,
+                                   int pbc_flag, int *pbc)
+{
+  int i,j,m;
+  double dx,dy,dz,dvx,dvy,dvz;
+
+  m = 0;
+  if (pbc_flag == 0) {
+    for (i = 0; i < n; i++) {
+      j = list[i];
+      buf[m++] = x[j][0];
+      buf[m++] = x[j][1];
+      buf[m++] = x[j][2];
+      buf[m++] = ubuf(tag[j]).d;
+      buf[m++] = ubuf(type[j]).d;
+      buf[m++] = ubuf(mask[j]).d;
+      buf[m++] = path[j][0];
+      buf[m++] = path[j][1];
+      buf[m++] = path[j][2];
+      buf[m++] = norm[j][0];
+      buf[m++] = norm[j][1];
+      buf[m++] = norm[j][2];
+      buf[m++] = dnorm[j][0];
+      buf[m++] = dnorm[j][1];
+      buf[m++] = dnorm[j][2];
+      buf[m++] = v[j][0];
+      buf[m++] = v[j][1];
+      buf[m++] = v[j][2];
+    }
+  } else {
+    if (domain->triclinic == 0) {
+      dx = pbc[0]*domain->xprd;
+      dy = pbc[1]*domain->yprd;
+      dz = pbc[2]*domain->zprd;
+    } else {
+      dx = pbc[0];
+      dy = pbc[1];
+      dz = pbc[2];
+    }
+    if (!deform_vremap) {
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = ubuf(tag[j]).d;
+        buf[m++] = ubuf(type[j]).d;
+        buf[m++] = ubuf(mask[j]).d;
+        buf[m++] = path[j][0];
+        buf[m++] = path[j][1];
+        buf[m++] = path[j][2];
+        buf[m++] = norm[j][0];
+        buf[m++] = norm[j][1];
+        buf[m++] = norm[j][2];
+        buf[m++] = dnorm[j][0];
+        buf[m++] = dnorm[j][1];
+        buf[m++] = dnorm[j][2];
+        buf[m++] = v[j][0];
+        buf[m++] = v[j][1];
+        buf[m++] = v[j][2];
+      }
+    } else {
+      dvx = pbc[0]*h_rate[0] + pbc[5]*h_rate[5] + pbc[4]*h_rate[4];
+      dvy = pbc[1]*h_rate[1] + pbc[3]*h_rate[3];
+      dvz = pbc[2]*h_rate[2];
+      for (i = 0; i < n; i++) {
+        j = list[i];
+        buf[m++] = x[j][0] + dx;
+        buf[m++] = x[j][1] + dy;
+        buf[m++] = x[j][2] + dz;
+        buf[m++] = ubuf(tag[j]).d;
+        buf[m++] = ubuf(type[j]).d;
+        buf[m++] = ubuf(mask[j]).d;
+        buf[m++] = path[j][0];
+        buf[m++] = path[j][1];
+        buf[m++] = path[j][2];
+        buf[m++] = norm[j][0];
+        buf[m++] = norm[j][1];
+        buf[m++] = norm[j][2];
+        buf[m++] = dnorm[j][0];
+        buf[m++] = dnorm[j][1];
+        buf[m++] = dnorm[j][2];
+        if (mask[i] & deform_groupbit) {
+          buf[m++] = v[j][0] + dvx;
+          buf[m++] = v[j][1] + dvy;
+          buf[m++] = v[j][2] + dvz;
+        } else {
+          buf[m++] = v[j][0];
+          buf[m++] = v[j][1];
+          buf[m++] = v[j][2];
+        }
+      }
+    }
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->pack_border(n,list,&buf[m]);
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_border_hybrid(int n, int *list, double *buf)
+{
+  int i,j,m;
+
+  m = 0;
+  for (i = 0; i < n; i++) {
+    j = list[i];
+    buf[m++] = path[j][0];
+    buf[m++] = path[j][1];
+    buf[m++] = path[j][2];
+    buf[m++] = norm[j][0];
+    buf[m++] = norm[j][1];
+    buf[m++] = norm[j][2];
+    buf[m++] = dnorm[j][0];
+    buf[m++] = dnorm[j][1];
+    buf[m++] = dnorm[j][2];
+  }
+
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::unpack_border(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    if (i == nmax) grow(0);
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    tag[i] = (tagint) ubuf(buf[m++]).i;
+    type[i] = (int) ubuf(buf[m++]).i;
+    mask[i] = (int) ubuf(buf[m++]).i;
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->
+        unpack_border(n,first,&buf[m]);
+
+}
+
+/* ---------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::unpack_border_vel(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    if (i == nmax) grow(0);
+    x[i][0] = buf[m++];
+    x[i][1] = buf[m++];
+    x[i][2] = buf[m++];
+    tag[i] = (tagint) ubuf(buf[m++]).i;
+    type[i] = (int) ubuf(buf[m++]).i;
+    mask[i] = (int) ubuf(buf[m++]).i;
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+    v[i][0] = buf[m++];
+    v[i][1] = buf[m++];
+    v[i][2] = buf[m++];
+  }
+
+  if (atom->nextra_border)
+    for (int iextra = 0; iextra < atom->nextra_border; iextra++)
+      m += modify->fix[atom->extra_border[iextra]]->
+        unpack_border(n,first,&buf[m]);
+
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::unpack_border_hybrid(int n, int first, double *buf)
+{
+  int i,m,last;
+
+  m = 0;
+  last = first + n;
+  for (i = first; i < last; i++) {
+    path[i][0] = buf[m++];
+    path[i][1] = buf[m++];
+    path[i][2] = buf[m++];
+    norm[i][0] = buf[m++];
+    norm[i][1] = buf[m++];
+    norm[i][2] = buf[m++];
+    dnorm[i][0] = buf[m++];
+    dnorm[i][1] = buf[m++];
+    dnorm[i][2] = buf[m++];
+  }
+
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   pack all atom quantities for shipping to another proc
+   xyz must be 1st 3 values, so that comm::exchange can test on them
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_exchange(int i, double *buf)
+{
+  int m = 1;
+  buf[m++] = x[i][0];
+  buf[m++] = x[i][1];
+  buf[m++] = x[i][2];
+  buf[m++] = v[i][0];
+  buf[m++] = v[i][1];
+  buf[m++] = v[i][2];
+  buf[m++] = ubuf(tag[i]).d;
+  buf[m++] = ubuf(type[i]).d;
+  buf[m++] = ubuf(mask[i]).d;
+  buf[m++] = ubuf(image[i]).d;
+
+  buf[m++] = path[i][0];
+  buf[m++] = path[i][1];
+  buf[m++] = path[i][2];
+  buf[m++] = norm[i][0];
+  buf[m++] = norm[i][1];
+  buf[m++] = norm[i][2];
+  buf[m++] = dnorm[i][0];
+  buf[m++] = dnorm[i][1];
+  buf[m++] = dnorm[i][2];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      m += modify->fix[atom->extra_grow[iextra]]->pack_exchange(i,&buf[m]);
+
+  buf[0] = m;
+  return m;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::unpack_exchange(double *buf)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  int m = 1;
+  x[nlocal][0] = buf[m++];
+  x[nlocal][1] = buf[m++];
+  x[nlocal][2] = buf[m++];
+  v[nlocal][0] = buf[m++];
+  v[nlocal][1] = buf[m++];
+  v[nlocal][2] = buf[m++];
+  tag[nlocal] = (tagint) ubuf(buf[m++]).i;
+  type[nlocal] = (int) ubuf(buf[m++]).i;
+  mask[nlocal] = (int) ubuf(buf[m++]).i;
+  image[nlocal] = (imageint) ubuf(buf[m++]).i;
+
+  path[nlocal][0] = buf[m++];
+  path[nlocal][1] = buf[m++];
+  path[nlocal][2] = buf[m++];
+  norm[nlocal][0] = buf[m++];
+  norm[nlocal][1] = buf[m++];
+  norm[nlocal][2] = buf[m++];
+  dnorm[nlocal][0] = buf[m++];
+  dnorm[nlocal][1] = buf[m++];
+  dnorm[nlocal][2] = buf[m++];
+
+  if (atom->nextra_grow)
+    for (int iextra = 0; iextra < atom->nextra_grow; iextra++)
+      m += modify->fix[atom->extra_grow[iextra]]->
+        unpack_exchange(nlocal,&buf[m]);
+
+  atom->nlocal++;
+
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   size of restart data for all atoms owned by this proc
+   include extra data stored by fixes
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::size_restart()
+{
+  int i;
+
+  int nlocal = atom->nlocal;
+  int n = 20 * nlocal;
+
+  if (atom->nextra_restart)
+    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)
+      for (i = 0; i < nlocal; i++)
+        n += modify->fix[atom->extra_restart[iextra]]->size_restart(i);
+
+  return n;
+}
+
+/* ----------------------------------------------------------------------
+   pack atom I's data for restart file including extra quantities
+   xyz must be 1st 3 values, so that read_restart can test on them
+   molecular types may be negative, but write as positive
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_restart(int i, double *buf)
+{
+  int m = 1;
+
+  buf[m++] = x[i][0];
+  buf[m++] = x[i][1];
+  buf[m++] = x[i][2];
+  buf[m++] = ubuf(tag[i]).d;
+  buf[m++] = ubuf(type[i]).d;
+  buf[m++] = ubuf(mask[i]).d;
+  buf[m++] = ubuf(image[i]).d;
+  buf[m++] = v[i][0];
+  buf[m++] = v[i][1];
+  buf[m++] = v[i][2];
+
+  buf[m++] = path[i][0];
+  buf[m++] = path[i][1];
+  buf[m++] = path[i][2];
+  buf[m++] = norm[i][0];
+  buf[m++] = norm[i][1];
+  buf[m++] = norm[i][2];
+  buf[m++] = dnorm[i][0];
+  buf[m++] = dnorm[i][1];
+  buf[m++] = dnorm[i][2];
+
+  if (atom->nextra_restart)
+    for (int iextra = 0; iextra < atom->nextra_restart; iextra++)
+      m += modify->fix[atom->extra_restart[iextra]]->pack_restart(i,&buf[m]);
+
+  buf[0] = m;
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   unpack data for one atom from restart file including extra quantities
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::unpack_restart(double *buf)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) {
+    grow(0);
+    if (atom->nextra_store)
+      memory->grow(atom->extra,nmax,atom->nextra_store,"atom:extra");
+  }
+
+  int m = 1;
+  x[nlocal][0] = buf[m++];
+  x[nlocal][1] = buf[m++];
+  x[nlocal][2] = buf[m++];
+  tag[nlocal] = (tagint) ubuf(buf[m++]).i;
+  type[nlocal] = (int) ubuf(buf[m++]).i;
+  mask[nlocal] = (int) ubuf(buf[m++]).i;
+  image[nlocal] = (imageint) ubuf(buf[m++]).i;
+  v[nlocal][0] = buf[m++];
+  v[nlocal][1] = buf[m++];
+  v[nlocal][2] = buf[m++];
+
+  path[nlocal][0] = buf[m++];
+  path[nlocal][1] = buf[m++];
+  path[nlocal][2] = buf[m++];
+  norm[nlocal][0] = buf[m++];
+  norm[nlocal][1] = buf[m++];
+  norm[nlocal][2] = buf[m++];
+  dnorm[nlocal][0] = buf[m++];
+  dnorm[nlocal][1] = buf[m++];
+  dnorm[nlocal][2] = buf[m++];
+
+  double **extra = atom->extra;
+  if (atom->nextra_store) {
+    int size = static_cast<int> (buf[0]) - m;
+    for (int i = 0; i < size; i++) extra[nlocal][i] = buf[m++];
+  }
+
+  atom->nlocal++;
+  return m;
+}
+
+/* ----------------------------------------------------------------------
+   create one atom of itype at coord
+   set other values to defaults
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::create_atom(int itype, double *coord)
+{
+
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  tag[nlocal] = 0;
+  type[nlocal] = itype;
+  x[nlocal][0] = coord[0];
+  x[nlocal][1] = coord[1];
+  x[nlocal][2] = coord[2];
+  mask[nlocal] = 1;
+  image[nlocal] = ((imageint) IMGMAX << IMG2BITS) |
+    ((imageint) IMGMAX << IMGBITS) | IMGMAX;
+  v[nlocal][0] = 0.0;
+  v[nlocal][1] = 0.0;
+  v[nlocal][2] = 0.0;
+
+  path[nlocal][0] = 0.0;
+  path[nlocal][1] = 0.0;
+  path[nlocal][2] = 0.0;
+  norm[nlocal][0] = 0.0;
+  norm[nlocal][1] = 0.0;
+  norm[nlocal][2] = 0.0;
+  dnorm[nlocal][0] = 0.0;
+  dnorm[nlocal][1] = 0.0;
+  dnorm[nlocal][2] = 0.0;
+
+  atom->nlocal++;
+}
+
+/* ----------------------------------------------------------------------
+   unpack one line from Atoms section of data file
+   initialize other atom quantities
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::data_atom(double *coord, imageint imagetmp, char **values)
+{
+  int nlocal = atom->nlocal;
+  if (nlocal == nmax) grow(0);
+
+  tag[nlocal] = ATOTAGINT(values[0]);
+  type[nlocal] = atoi(values[1]);
+  if (type[nlocal] <= 0 || type[nlocal] > atom->ntypes)
+    error->one(FLERR,"Invalid atom type in Atoms section of data file");
+
+  x[nlocal][0] = coord[0];
+  x[nlocal][1] = coord[1];
+  x[nlocal][2] = coord[2];
+
+  path[nlocal][0] = atof(values[5]);
+  path[nlocal][1] = atof(values[6]);
+  path[nlocal][2] = atof(values[7]);
+
+  norm[nlocal][0] = atof(values[8]);
+  norm[nlocal][1] = atof(values[9]);
+  norm[nlocal][2] = atof(values[10]);
+
+  dnorm[nlocal][0] = atof(values[11]);
+  dnorm[nlocal][1] = atof(values[12]);
+  dnorm[nlocal][2] = atof(values[13]);
+
+  image[nlocal] = imagetmp;
+
+  mask[nlocal] = 1;
+  v[nlocal][0] = 0.0;
+  v[nlocal][1] = 0.0;
+  v[nlocal][2] = 0.0;
+
+  atom->nlocal++;
+}
+
+/* ----------------------------------------------------------------------
+   unpack hybrid quantities from one line in Atoms section of data file
+   initialize other atom quantities for this sub-style
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::data_atom_hybrid(int nlocal, char **values)
+{
+
+  path[nlocal][0] = atof(values[0]);
+  path[nlocal][1] = atof(values[1]);
+  path[nlocal][2] = atof(values[2]);
+
+  norm[nlocal][0] = atof(values[3]);
+  norm[nlocal][1] = atof(values[4]);
+  norm[nlocal][2] = atof(values[5]);
+
+  dnorm[nlocal][0] = atof(values[6]);
+  dnorm[nlocal][1] = atof(values[7]);
+  dnorm[nlocal][2] = atof(values[8]);
+
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   pack atom info for data file including 3 image flags
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::pack_data(double **buf)
+{
+  int nlocal = atom->nlocal;
+  for (int i = 0; i < nlocal; i++) {
+    buf[i][0] = ubuf(tag[i]).d;
+    buf[i][1] = ubuf(type[i]).d;
+    buf[i][2] = x[i][0];
+    buf[i][3] = x[i][1];
+    buf[i][4] = x[i][2];
+
+    buf[i][5] = path[i][0];
+    buf[i][6] = path[i][1];
+    buf[i][7] = path[i][2];
+
+    buf[i][8] = norm[i][0];
+    buf[i][9] = norm[i][1];
+    buf[i][10] = norm[i][2];
+
+    buf[i][11] = dnorm[i][0];
+    buf[i][12] = dnorm[i][1];
+    buf[i][13] = dnorm[i][2];
+
+    buf[i][14] = ubuf((image[i] & IMGMASK) - IMGMAX).d;
+    buf[i][15] = ubuf((image[i] >> IMGBITS & IMGMASK) - IMGMAX).d;
+    buf[i][16] = ubuf((image[i] >> IMG2BITS) - IMGMAX).d;
+  }
+}
+
+/* ----------------------------------------------------------------------
+   pack hybrid atom info for data file
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::pack_data_hybrid(int i, double *buf)
+{
+  buf[0] = path[i][0];
+  buf[1] = path[i][1];
+  buf[2] = path[i][2];
+
+  buf[3] = norm[i][0];
+  buf[4] = norm[i][1];
+  buf[5] = norm[i][2];
+
+  buf[6] = dnorm[i][0];
+  buf[7] = dnorm[i][1];
+  buf[8] = dnorm[i][2];
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   write atom info to data file including 3 image flags
+------------------------------------------------------------------------- */
+
+void AtomVecPAFIPATH::write_data(FILE *fp, int n, double **buf)
+{
+  for (int i = 0; i < n; i++)
+    fprintf(fp,TAGINT_FORMAT \
+            " %d %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e"
+            " %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %d %d %d\n",
+            (tagint) ubuf(buf[i][0]).i,(int) ubuf(buf[i][1]).i,
+            buf[i][2],buf[i][3],buf[i][4],
+            buf[i][5],buf[i][6],buf[i][7],
+            buf[i][8],buf[i][9],buf[i][10],
+            buf[i][11],buf[i][12],buf[i][13],
+            (int) ubuf(buf[i][14]).i,(int) ubuf(buf[i][15]).i,
+            (int) ubuf(buf[i][16]).i);
+}
+
+/* ----------------------------------------------------------------------
+   write hybrid atom info to data file
+------------------------------------------------------------------------- */
+
+int AtomVecPAFIPATH::write_data_hybrid(FILE *fp, double *buf)
+{
+  fprintf(fp,"%-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e %-1.16e",
+  buf[0],buf[1],buf[2],
+  buf[3],buf[4],buf[5],
+  buf[6],buf[7],buf[8]);
+  return 9;
+}
+
+/* ----------------------------------------------------------------------
+   return # of bytes of allocated memory
+------------------------------------------------------------------------- */
+
+bigint AtomVecPAFIPATH::memory_usage()
+{
+  bigint bytes = 0;
+
+  if (atom->memcheck("tag")) bytes += memory->usage(tag,nmax);
+  if (atom->memcheck("type")) bytes += memory->usage(type,nmax);
+  if (atom->memcheck("mask")) bytes += memory->usage(mask,nmax);
+  if (atom->memcheck("image")) bytes += memory->usage(image,nmax);
+  if (atom->memcheck("x")) bytes += memory->usage(x,nmax,3);
+  if (atom->memcheck("v")) bytes += memory->usage(v,nmax,3);
+  if (atom->memcheck("f")) bytes += memory->usage(f,nmax*comm->nthreads,3);
+
+  if (atom->memcheck("path")) bytes += memory->usage(path,nmax,3);
+  if (atom->memcheck("norm")) bytes += memory->usage(norm,nmax,3);
+  if (atom->memcheck("dnorm")) bytes += memory->usage(dnorm,nmax,3);
+
+  return bytes;
+}
diff -ruN src/USER-PAFI/atom_vec_pafipath.h new_src/USER-PAFI/atom_vec_pafipath.h
--- src/USER-PAFI/atom_vec_pafipath.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/atom_vec_pafipath.h	2018-11-16 10:47:07.384045726 +0100
@@ -0,0 +1,91 @@
+/* -*- c++ -*- ----------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------
+   Contributing authors: Thomas Swinburne (CNRS & CINaM, Marseille, France)
+
+   Please cite the related publication:
+   T.D. Swinburne and M.-C. Marinica, Unsupervised calculation of free energy barriers in large crystalline systems, Physical Review Letters 2018
+------------------------------------------------------------------------- */
+
+
+#ifdef ATOM_CLASS
+
+AtomStyle(pafipath,AtomVecPAFIPATH)
+
+#else
+
+#ifndef LMP_ATOM_VEC_PAFIPATH_H
+#define LMP_ATOM_VEC_PAFIPATH_H
+
+#include "atom_vec.h"
+
+namespace LAMMPS_NS {
+
+class AtomVecPAFIPATH : public AtomVec {
+ public:
+  AtomVecPAFIPATH(class LAMMPS *);
+  void grow(int);
+  void grow_reset();
+  void copy(int, int, int);
+  int pack_comm(int, int *, double *, int, int *);
+  int pack_comm_vel(int, int *, double *, int, int *);
+  void unpack_comm(int, int, double *);
+  void unpack_comm_vel(int, int, double *);
+  int pack_reverse(int, int, double *);
+  void unpack_reverse(int, int *, double *);
+  int pack_border(int, int *, double *, int, int *);
+  int pack_border_vel(int, int *, double *, int, int *);
+  int pack_border_hybrid(int, int *, double *);
+  void unpack_border(int, int, double *);
+  void unpack_border_vel(int, int, double *);
+  int unpack_border_hybrid(int, int, double *);
+  int pack_exchange(int, double *);
+  int unpack_exchange(double *);
+  int size_restart();
+  int pack_restart(int, double *);
+  int unpack_restart(double *);
+  void create_atom(int, double *);
+  virtual void data_atom(double *, imageint, char **);
+  virtual int data_atom_hybrid(int, char **);
+  virtual void pack_data(double **);
+  virtual int pack_data_hybrid(int, double *);
+  virtual void write_data(FILE *, int, double **);
+  virtual int write_data_hybrid(FILE *, double *);
+  bigint memory_usage();
+
+ private:
+  tagint *tag;
+  int *type,*mask;
+  imageint *image;
+  double **x,**v,**f;		// lattice quantities
+  // 0th, 1st and 2nd derivative of reference path w.r.t. to path coordinate r
+  double **path,**norm,**dnorm;
+};
+
+}
+
+#endif
+#endif
+
+/* ERROR/WARNING messages:
+
+E: Per-processor system is too big
+
+The number of owned atoms plus ghost atoms on a single
+processor must fit in 32-bit integer.
+
+E: Invalid atom type in Atoms section of data file
+
+Atom types must range from 1 to specified # of types.
+
+*/
diff -ruN src/USER-PAFI/fix_hp.cpp new_src/USER-PAFI/fix_hp.cpp
--- src/USER-PAFI/fix_hp.cpp	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/fix_hp.cpp	2018-11-16 15:58:42.096158293 +0100
@@ -0,0 +1,634 @@
+/* ----------------------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+/* ------------------------------------------------------------------------
+   Contributing authors: Thomas Swinburne (CNRS & CINaM, Marseille, France)
+
+   Please cite the related publication:
+   T.D. Swinburne and M.-C. Marinica, Unsupervised calculation of free energy barriers in large crystalline systems, Physical Review Letters 2018
+------------------------------------------------------------------------- */
+
+
+//#include <iostream>
+#include <mpi.h>
+#include <math.h>
+#include <string.h>
+#include <stdlib.h>
+#include "fix_hp.h"
+#include "math_extra.h"
+#include "atom.h"
+#include "atom_vec_ellipsoid.h"
+#include "force.h"
+#include "update.h"
+#include "modify.h"
+#include "compute.h"
+#include "domain.h"
+#include "region.h"
+#include "respa.h"
+#include "comm.h"
+#include "input.h"
+#include "variable.h"
+#include "random_mars.h"
+#include "memory.h"
+#include "error.h"
+#include "group.h"
+
+
+
+
+using namespace LAMMPS_NS;
+using namespace FixConst;
+
+enum{NONE,CONSTANT,EQUAL,ATOM};
+
+/* ---------------------------------------------------------------------- */
+
+FixHP::FixHP(LAMMPS *lmp, int narg, char **arg) :
+  Fix(lmp, narg, arg), idregion(NULL), random(NULL)
+{
+  if (narg < 5) error->all(FLERR,"Illegal fix hp command");
+
+  dynamic_group_allow = 1;
+  vector_flag = 1;
+  size_vector = 4;
+  global_freq = 1;
+  extvector = 0;
+  od_flag = 0;
+  com_flag = 0;
+
+  respa_level_support = 1;
+  ilevel_respa = nlevels_respa = 0;
+
+  temperature = force->numeric(FLERR,arg[3]);
+  t_period = force->numeric(FLERR,arg[4]);
+  seed = force->inumeric(FLERR,arg[5]);
+  // TODO UNITS
+  gamma = 1. / t_period / force->ftm2v;
+  sqrtD = sqrt(1.) * sqrt(24.0*force->boltz/t_period/update->dt/force->mvv2e*temperature) / force->ftm2v;
+
+  // optional args
+  iregion = -1;
+  idregion = NULL;
+  int iarg = 6;
+  while (iarg < narg) {
+    if (strcmp(arg[iarg],"region") == 0) {
+      if (iarg+2 > narg) error->all(FLERR,"Illegal fix hp command");
+      iregion = domain->find_region(arg[iarg+1]);
+      if (iregion == -1)
+        error->all(FLERR,"Region ID for fix hp does not exist");
+      int n = strlen(arg[iarg+1]) + 1;
+      idregion = new char[n];
+      strcpy(idregion,arg[iarg+1]);
+      iarg += 2;
+    } else if (strcmp(arg[iarg],"overdamped") == 0) {
+      od_flag = force->inumeric(FLERR,arg[iarg+1]);
+      iarg += 2;
+    } else if (strcmp(arg[iarg],"com") == 0) {
+      com_flag = force->inumeric(FLERR,arg[iarg+1]);
+      iarg += 2;
+    } else error->all(FLERR,"Illegal fix hp command");
+  }
+  force_flag = 0;
+
+  for(int i = 0; i < 10; i++) {
+    c_v[i] = 0.;
+    c_v_all[i] = 0.;
+  }
+  for(int i=0; i<5; i++) {
+    proj[i] = 0.0;
+    proj_all[i] = 0.0;
+  }
+  for(int i=0; i<4; i++) {
+    results[i] = 0.0;
+    results_all[i] = 0.0;
+  }
+  maxatom = 1;
+  memory->create(h,maxatom,3,"fixhp:h");
+
+  // initialize Marsaglia RNG with processor-unique seed
+  random = new RanMars(lmp,seed + comm->me);
+
+  // nve
+  dynamic_group_allow = 1;
+  time_integrate = 1;
+}
+
+/* ---------------------------------------------------------------------- */
+
+FixHP::~FixHP()
+{
+  if (copymode) return;
+  delete random;
+  delete [] idregion;
+  memory->destroy(h);
+}
+
+/* ---------------------------------------------------------------------- */
+
+int FixHP::setmask()
+{
+  int mask = 0;
+  mask |= POST_FORCE;
+  mask |= POST_FORCE_RESPA;
+  mask |= MIN_POST_FORCE;
+  mask |= INITIAL_INTEGRATE;
+  // nve
+  mask |= FINAL_INTEGRATE;
+  mask |= INITIAL_INTEGRATE_RESPA;
+  mask |= FINAL_INTEGRATE_RESPA;
+  return mask;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixHP::init()
+{
+  // set index and check validity of region
+  // nve
+  dtv = update->dt;
+  dtf = 0.5 * update->dt * force->ftm2v;
+
+  if (iregion >= 0) {
+    iregion = domain->find_region(idregion);
+    if (iregion == -1)
+      error->all(FLERR,"Region ID for fix hp does not exist");
+  }
+
+  if (strstr(update->integrate_style,"respa")) {
+    step_respa = ((Respa *) update->integrate)->step; // nve
+    nlevels_respa = ((Respa *) update->integrate)->nlevels;
+    if (respa_level >= 0) ilevel_respa = MIN(respa_level,nlevels_respa-1);
+    else ilevel_respa = nlevels_respa-1;
+  }
+
+}
+
+void FixHP::setup(int vflag)
+{
+  if (strstr(update->integrate_style,"verlet"))
+    post_force(vflag);
+  else
+    for (int ilevel = 0; ilevel < nlevels_respa; ilevel++) {
+      ((Respa *) update->integrate)->copy_flevel_f(ilevel);
+      post_force_respa(vflag,ilevel,0);
+      ((Respa *) update->integrate)->copy_f_flevel(ilevel);
+    }
+}
+
+void FixHP::min_setup(int vflag)
+{
+  post_force(vflag);
+}
+
+
+void FixHP::post_force(int vflag)
+{
+  double **x = atom->x;
+  double **v = atom->v;
+  double **f = atom->f;
+  double *rmass = atom->rmass;
+  double *mass = atom->mass;
+  int *type = atom->type;
+  int *mask = atom->mask;
+  int nlocal = atom->nlocal;
+  // update region if necessary
+
+  Region *region = NULL;
+  if (iregion >= 0) {
+    region = domain->regions[iregion];
+    region->prematch();
+  }
+  // reallocate norm array if necessary
+  if (atom->nmax > maxatom) {
+    maxatom = atom->nmax;
+    memory->destroy(h);
+    memory->create(h,maxatom,3,"fixhp:h");
+  }
+
+  double **path = atom->path;
+  double **norm = atom->norm;
+  double **dnorm = atom->dnorm;
+
+  double xum=0.;
+
+  // proj 0,1,2 = f.n, v.n, h.n
+  // proj 3,4,5 = psi, f.n**2, f*(1-psi)
+  // c_v 0,1,2 = fxcom, fycom, fzcom etc
+  for(int i = 0; i < 10; i++) {
+    c_v[i] = 0.;
+    c_v_all[i] = 0.;
+  }
+  for(int i = 0; i < 5; i++) {
+    proj[i] = 0.;
+    proj_all[i] = 0.;
+  }
+
+  double deviation[3] = {0.,0.,0.};
+
+  double fn;
+
+  force_flag=0;
+  for (int i = 0; i < nlocal; i++) {
+    if (mask[i] & groupbit) {
+      if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+
+      h[i][0] = random->uniform() - 0.5;
+      h[i][1] = random->uniform() - 0.5;
+      h[i][2] = random->uniform() - 0.5;
+
+      proj[0] += f[i][0] * norm[i][0]; // f.n
+      proj[0] += f[i][1] * norm[i][1]; // f.n
+      proj[0] += f[i][2] * norm[i][2]; // f.n
+
+      proj[1] += v[i][0] * norm[i][0]; // v.n
+      proj[1] += v[i][1] * norm[i][1]; // v.n
+      proj[1] += v[i][2] * norm[i][2]; // v.n
+
+      proj[2] += h[i][0] * norm[i][0]; // h.n
+      proj[2] += h[i][1] * norm[i][1]; // h.n
+      proj[2] += h[i][2] * norm[i][2]; // h.n
+
+      deviation[0] = x[i][0]-path[i][0]; // x-path
+      deviation[1] = x[i][1]-path[i][1]; // x-path
+      deviation[2] = x[i][2]-path[i][2]; // x-path
+      domain->minimum_image(deviation);
+
+      proj[3] += dnorm[i][0]*deviation[0]; // (x-path).dn/nn = psi
+      proj[3] += dnorm[i][1]*deviation[1]; // (x-path).dn/nn = psi
+      proj[3] += dnorm[i][2]*deviation[2]; // (x-path).dn/nn = psi
+
+      proj[4] += norm[i][0]*deviation[0]; // (x-path).dn/nn = psi
+      proj[4] += norm[i][1]*deviation[1]; // (x-path).dn/nn = psi
+      proj[4] += norm[i][2]*deviation[2]; // (x-path).dn/nn = psi
+
+    }
+  }
+
+  if(com_flag == 0){
+    c_v[9] += 1.0;
+  } else {
+    for (int i = 0; i < nlocal; i++)
+      if (mask[i] & groupbit) {
+        if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+
+        c_v[0] += f[i][0];
+        c_v[1] += f[i][1];
+        c_v[2] += f[i][2];
+
+        c_v[3] += v[i][0];
+        c_v[4] += v[i][1];
+        c_v[5] += v[i][2];
+
+        c_v[6] += h[i][0];
+        c_v[7] += h[i][1];
+        c_v[8] += h[i][2];
+
+        c_v[9] += 1.0;
+      }
+  }
+  MPI_Allreduce(proj,proj_all,5,MPI_DOUBLE,MPI_SUM,world);
+  MPI_Allreduce(c_v,c_v_all,10,MPI_DOUBLE,MPI_SUM,world);
+
+  // results - f.n*(1-psi), (f.n)^2*(1-psi)^2, 1-psi
+  if(comm->me ==0) {
+    results_all[0] = proj_all[0] * (1.-proj_all[3]);
+    results_all[1] = results_all[0] * results_all[0];
+    results_all[2] = 1.-proj_all[3];
+    results_all[3] = proj_all[4];
+  }
+  MPI_Bcast(results_all,4,MPI_DOUBLE,0,world);
+  force_flag = 1;
+
+  for (int i = 0; i < nlocal; i++){
+    if (mask[i] & groupbit) {
+      if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+
+      f[i][0] -= proj_all[0] * norm[i][0] + c_v_all[0]/c_v_all[9];
+      f[i][1] -= proj_all[0] * norm[i][1] + c_v_all[1]/c_v_all[9];
+      f[i][2] -= proj_all[0] * norm[i][2] + c_v_all[2]/c_v_all[9];
+
+      v[i][0] -= proj_all[1] * norm[i][0] + c_v_all[3]/c_v_all[9];
+      v[i][1] -= proj_all[1] * norm[i][1] + c_v_all[4]/c_v_all[9];
+      v[i][2] -= proj_all[1] * norm[i][2] + c_v_all[5]/c_v_all[9];
+
+      h[i][0] -= proj_all[2] * norm[i][0] + c_v_all[6]/c_v_all[9];
+      h[i][1] -= proj_all[2] * norm[i][1] + c_v_all[7]/c_v_all[9];
+      h[i][2] -= proj_all[2] * norm[i][2] + c_v_all[8]/c_v_all[9];
+    }
+  }
+
+
+  if (od_flag == 0) {
+    for (int i = 0; i < nlocal; i++){
+      if (mask[i] & groupbit) {
+        if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+
+        if(rmass) mass_f = rmass[i];
+        else mass_f = mass[type[i]];
+
+        f[i][0] += -gamma * mass_f * v[i][0] + sqrtD * sqrt(mass_f) * h[i][0];
+        f[i][1] += -gamma * mass_f * v[i][1] + sqrtD * sqrt(mass_f) * h[i][1];
+        f[i][2] += -gamma * mass_f * v[i][2] + sqrtD * sqrt(mass_f) * h[i][2];
+      }
+    }
+  } else {
+    for (int i = 0; i < nlocal; i++){
+      if (mask[i] & groupbit) {
+        if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+
+        if(rmass) mass_f = rmass[i];
+        else mass_f = mass[type[i]];
+
+        f[i][0] += sqrtD * h[i][0] / gamma / sqrt(mass_f);
+        f[i][1] += sqrtD * h[i][1] / gamma / sqrt(mass_f);
+        f[i][2] += sqrtD * h[i][2] / gamma / sqrt(mass_f);
+      }
+    }
+  }
+}
+
+void FixHP::post_force_respa(int vflag, int ilevel, int iloop)
+{
+  // set force to desired value on requested level, 0.0 on other levels
+
+  if (ilevel == ilevel_respa) post_force(vflag);
+  else {
+    Region *region = NULL;
+    if (iregion >= 0) {
+      region = domain->regions[iregion];
+      region->prematch();
+    }
+    double **x = atom->x;
+    double **f = atom->f;
+    int *mask = atom->mask;
+    int nlocal = atom->nlocal;
+
+    for (int i = 0; i < nlocal; i++)
+      if (mask[i] & groupbit) {
+        if (region && !region->match(x[i][0],x[i][1],x[i][2])) continue;
+        for (int k = 0; k < 3; k++) f[i][k] = 0.0;
+      }
+  }
+};
+
+void FixHP::min_post_force(int vflag)
+{
+  post_force(vflag);
+};
+
+double FixHP::compute_vector(int n)
+{
+  // only sum across procs one time
+  /*if (force_flag == 0) {
+
+    for(int i=0; i<4; i++) proj_all[i] = 0.;
+    MPI_Allreduce(proj,proj_all,4,MPI_DOUBLE,MPI_SUM,world);
+    force_flag = 1;
+    results[0] = proj_all[0] * (1.-proj_all[3]);
+    results[1] = results[0] * results[0];
+    results[2] = 1.-proj_all[3];
+  }*/
+  //std::cout<<"LAMMPS ("<<update->ntimestep<<","<<comm->me<<") : "<<results_all[n]<<std::endl;
+  return results_all[n];
+};
+
+
+
+void FixHP::initial_integrate(int vflag)
+{
+  double dtfm;
+
+  // update v and x of atoms in group
+
+  double **x = atom->x;
+  double **v = atom->v;
+  double **f = atom->f;
+
+  double *rmass = atom->rmass;
+  double *mass = atom->mass;
+  int *type = atom->type;
+  int *mask = atom->mask;
+  int nlocal = atom->nlocal;
+  if (igroup == atom->firstgroup) nlocal = atom->nfirst;
+
+
+  double **norm = atom->norm;
+
+  for(int i = 0; i < 10; i++) {
+    c_v[i] = 0.;
+    c_v_all[i] = 0.;
+  }
+  for(int i = 0; i < 5; i++) {
+    proj[i] = 0.;
+    proj_all[i] = 0.;
+  }
+
+  for (int i = 0; i < nlocal; i++) {
+    if (mask[i] & groupbit) {
+      proj[0] += f[i][0] * norm[i][0]; // f.n
+      proj[0] += f[i][1] * norm[i][1]; // f.n
+      proj[0] += f[i][2] * norm[i][2]; // f.n
+
+      proj[1] += v[i][0] * norm[i][0]; // v.n
+      proj[1] += v[i][1] * norm[i][1]; // v.n
+      proj[1] += v[i][2] * norm[i][2]; // v.n
+    }
+  }
+  if(com_flag == 0){
+    c_v[9] += 1.0;
+  } else {
+    for (int i = 0; i < nlocal; i++)
+      if (mask[i] & groupbit) {
+
+        c_v[0] += v[i][0];
+        c_v[1] += v[i][1];
+        c_v[2] += v[i][2];
+
+        c_v[3] += f[i][0];
+        c_v[4] += f[i][1];
+        c_v[5] += f[i][2];
+
+        c_v[9] += 1.0;
+      }
+  }
+
+
+  MPI_Allreduce(proj,proj_all,5,MPI_DOUBLE,MPI_SUM,world);
+  MPI_Allreduce(c_v,c_v_all,10,MPI_DOUBLE,MPI_SUM,world);
+
+  if (od_flag == 0){
+    if (rmass) {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / rmass[i];
+          v[i][0] += dtfm * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          v[i][1] += dtfm * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          v[i][2] += dtfm * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+          x[i][0] += dtv * (v[i][0]-norm[i][0]*proj_all[1] - c_v_all[0]/c_v_all[9]);
+          x[i][1] += dtv * (v[i][1]-norm[i][1]*proj_all[1] - c_v_all[1]/c_v_all[9]);
+          x[i][2] += dtv * (v[i][2]-norm[i][2]*proj_all[1] - c_v_all[2]/c_v_all[9]);
+        }
+    } else {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / mass[type[i]];
+          v[i][0] += dtfm * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          v[i][1] += dtfm * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          v[i][2] += dtfm * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+          x[i][0] += dtv * (v[i][0]-norm[i][0]*proj_all[1] - c_v_all[0]/c_v_all[9]);
+          x[i][1] += dtv * (v[i][1]-norm[i][1]*proj_all[1] - c_v_all[1]/c_v_all[9]);
+          x[i][2] += dtv * (v[i][2]-norm[i][2]*proj_all[1] - c_v_all[2]/c_v_all[9]);
+        }
+    }
+  } else {
+    if (rmass) {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / rmass[i];
+          v[i][0] = 0.;
+          v[i][1] = 0.;
+          v[i][2] = 0.;
+          x[i][0] += dtv * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          x[i][1] += dtv * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          x[i][2] += dtv * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+        }
+    } else {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / mass[type[i]];
+          v[i][0] = 0.;
+          v[i][1] = 0.;
+          v[i][2] = 0.;
+          x[i][0] += dtv * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          x[i][1] += dtv * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          x[i][2] += dtv * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+        }
+    }
+  }
+};
+
+/* ---------------------------------------------------------------------- */
+
+void FixHP::final_integrate()
+{
+  double dtfm;
+
+  // update v of atoms in group
+  double **v = atom->v;
+  double **f = atom->f;
+  double *rmass = atom->rmass;
+  double *mass = atom->mass;
+  int *type = atom->type;
+  int *mask = atom->mask;
+  int nlocal = atom->nlocal;
+  if (igroup == atom->firstgroup) nlocal = atom->nfirst;
+
+  double **norm = atom->norm;
+
+  for(int i = 0; i < 10; i++) {
+    c_v[i] = 0.;
+    c_v_all[i] = 0.;
+  }
+  for(int i = 0; i < 5; i++) {
+    proj[i] = 0.;
+    proj_all[i] = 0.;
+  }
+  for (int i = 0; i < nlocal; i++)
+    if (mask[i] & groupbit) {
+      proj[0] += f[i][0] * norm[i][0]; // f.n
+      proj[0] += f[i][1] * norm[i][1]; // f.n
+      proj[0] += f[i][2] * norm[i][2]; // f.n
+    }
+  if(com_flag == 0){
+    c_v[9] += 1.0;
+  } else {
+    for (int i = 0; i < nlocal; i++)
+      if (mask[i] & groupbit) {
+        c_v[3] += f[i][0];
+        c_v[4] += f[i][1];
+        c_v[5] += f[i][2];
+        c_v[9] += 1.0;
+      }
+  }
+
+  MPI_Allreduce(proj,proj_all,5,MPI_DOUBLE,MPI_SUM,world);
+  MPI_Allreduce(c_v,c_v_all,10,MPI_DOUBLE,MPI_SUM,world);
+
+  if (od_flag == 0){
+    if (rmass) {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / rmass[i];
+          v[i][0] += dtfm * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          v[i][1] += dtfm * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          v[i][2] += dtfm * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+        }
+    } else {
+      for (int i = 0; i < nlocal; i++)
+        if (mask[i] & groupbit) {
+          dtfm = dtf / mass[type[i]];
+          v[i][0] += dtfm * (f[i][0]-norm[i][0]*proj_all[0] - c_v_all[3]/c_v_all[9]);
+          v[i][1] += dtfm * (f[i][1]-norm[i][1]*proj_all[0] - c_v_all[4]/c_v_all[9]);
+          v[i][2] += dtfm * (f[i][2]-norm[i][2]*proj_all[0] - c_v_all[5]/c_v_all[9]);
+        }
+    }
+  } else {
+    for (int i = 0; i < nlocal; i++)
+      if (mask[i] & groupbit) {
+        v[i][0] = 0.;
+        v[i][1] = 0.;
+        v[i][2] = 0.;
+      }
+  }
+};
+
+/* ---------------------------------------------------------------------- */
+
+void FixHP::initial_integrate_respa(int vflag, int ilevel, int iloop)
+{
+  dtv = step_respa[ilevel];
+  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;
+
+  // innermost level - NVE update of v and x
+  // all other levels - NVE update of v
+
+  if (ilevel == 0) initial_integrate(vflag);
+  else final_integrate();
+};
+
+/* ---------------------------------------------------------------------- */
+
+void FixHP::final_integrate_respa(int ilevel, int iloop)
+{
+  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;
+  final_integrate();
+};
+
+/* ---------------------------------------------------------------------- */
+
+void FixHP::reset_dt()
+{
+  dtv = update->dt;
+  dtf = 0.5 * update->dt * force->ftm2v;
+};
+
+
+/* ----------------------------------------------------------------------
+   memory usage of local atom-based array
+------------------------------------------------------------------------- */
+
+double FixHP::memory_usage()
+{
+  double bytes = 0.0;
+  bytes = maxatom*3 * sizeof(double);
+  return bytes;
+};
diff -ruN src/USER-PAFI/fix_hp.h new_src/USER-PAFI/fix_hp.h
--- src/USER-PAFI/fix_hp.h	1970-01-01 01:00:00.000000000 +0100
+++ new_src/USER-PAFI/fix_hp.h	2018-11-16 15:58:42.096158293 +0100
@@ -0,0 +1,101 @@
+/* -*- c++ -*- ----------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+
+#ifdef FIX_CLASS
+
+FixStyle(hp,FixHP)
+
+#else
+
+#ifndef LMP_FIX_HP_H
+#define LMP_FIX_HP_H
+
+#include "fix.h"
+
+namespace LAMMPS_NS {
+
+class FixHP : public Fix {
+ public:
+  FixHP(class LAMMPS *, int, char **);
+  virtual ~FixHP();
+  int setmask();
+  virtual void init();
+
+  void setup(int);
+  void min_setup(int);
+  virtual void post_force(int);
+
+  void post_force_respa(int, int, int);
+  void min_post_force(int);
+  double compute_vector(int);
+  // nve
+  virtual void initial_integrate(int);
+  virtual void final_integrate();
+  virtual void initial_integrate_respa(int, int, int);
+  virtual void final_integrate_respa(int, int);
+  virtual void reset_dt();
+
+  double memory_usage();
+
+ protected:
+  int varflag,iregion;
+  char *idregion;
+
+  double proj[5], proj_all[5]; // f,v,h, psi
+  double results[4], results_all[4]; // f.n, (f.n)**2, psi, dx.n
+  double c_v[10],c_v_all[10];
+
+  double temperature,gamma,sqrtD,t_period,local_norm,mass_f;
+  int force_flag,od_flag,com_flag;
+  int nlevels_respa,ilevel_respa;
+  int maxatom;
+  class RanMars *random;
+  int seed;
+  double **h;
+  // nve
+  double dtv,dtf;
+  double *step_respa;
+  int mass_require;
+};
+
+}
+
+#endif
+#endif
+
+/* ERROR/WARNING messages:
+
+E: Illegal ... command
+
+Self-explanatory.  Check the input script syntax and compare to the
+documentation for the command.  You can use -echo screen as a
+command-line option when running LAMMPS to see the offending line.
+
+E: Region ID for fix setforce does not exist
+
+Self-explanatory.
+
+E: Variable name for fix setforce does not exist
+
+Self-explanatory.
+
+E: Variable for fix setforce is invalid style
+
+Only equal-style variables can be used.
+
+E: Cannot use non-zero forces in an energy minimization
+
+Fix setforce cannot be used in this manner.  Use fix addforce
+instead.
+
+*/
